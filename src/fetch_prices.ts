import * as fs from 'fs-extra';
import axios from 'axios';
import path from 'path';
import { StockData, YahooFinanceResponse } from './types';
import { stockSymbols } from './stock';
import logger from './logger';

// –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV
const STATS_DIR = 'stats';

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É stats –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
fs.ensureDirSync(STATS_DIR);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
function isDataUpToDate(symbol: string): boolean {
    try {
        const csvPath = path.join(STATS_DIR, `${symbol}.csv`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!fs.existsSync(csvPath)) {
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const stats = fs.statSync(csvPath);
        const lastModified = new Date(stats.mtime);
        const today = new Date();
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        const lastModifiedDate = lastModified.toDateString();
        const todayDate = today.toDateString();
        
        return lastModifiedDate === todayDate;
    } catch (error) {
        logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã –¥–ª—è ${symbol}: ${error instanceof Error ? error.message : 'Unknown error'}`);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Yahoo Finance API
async function fetchStockData(symbol: string): Promise<StockData[]> {
    try {
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã (–≥–æ–¥ –Ω–∞–∑–∞–¥ –∏ —Å–µ–≥–æ–¥–Ω—è)
        const endDate = Math.floor(Date.now() / 1000);
        const startDate = endDate - (365 * 24 * 60 * 60); // 365 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?period1=${startDate}&period2=${endDate}&interval=1d`;
        
        const response = await axios.get<YahooFinanceResponse>(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        
        const data = response.data;
        
        if (!data.chart || !data.chart.result || data.chart.result.length === 0) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ü–∏–∏');
        }
        
        const result = data.chart.result[0];
        const timestamps = result.timestamp;
        const quotes = result.indicators.quote[0];
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        const stockData: StockData[] = [];
        for (let i = 0; i < timestamps.length; i++) {
            const date = new Date(timestamps[i] * 1000);
            stockData.push({
                Date: date.toISOString().split('T')[0],
                Open: quotes.open[i] || 0,
                High: quotes.high[i] || 0,
                Low: quotes.low[i] || 0,
                Close: quotes.close[i] || 0,
                Volume: quotes.volume[i] || 0
            });
        }
        
        return stockData;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV
async function saveToCSV(symbol: string, data: StockData[]): Promise<void> {
    const csvContent = [
        'Date,Open,High,Low,Close,Volume',
        ...data.map(row => `${row.Date},${row.Open},${row.High},${row.Low},${row.Close},${row.Volume}`)
    ].join('\n');
    
    const csvPath = path.join(STATS_DIR, `${symbol}.csv`);
    await fs.writeFile(csvPath, csvContent, 'utf-8');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤
    const symbols = stockSymbols;
    
    logger.info(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbols.length} –∞–∫—Ç–∏–≤–æ–≤...`);
    
    let updatedCount = 0;
    let skippedCount = 0;
    
    try {
        for (const ticker of symbols) {
            logger.info(`\nüìä –ü—Ä–æ–≤–µ—Ä—è—é ${ticker}...`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
            if (isDataUpToDate(ticker)) {
                logger.info(`‚è≠Ô∏è ${ticker}: –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è)`);
                skippedCount++;
                continue;
            }
            
            logger.info(`üì• ${ticker}: –∑–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...`);
            
            try {
                const data = await fetchStockData(ticker);
                
                if (data.length === 0) {
                    logger.info(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${ticker}`);
                    continue;
                }
                
                await saveToCSV(ticker, data);
                logger.info(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${ticker}.csv (${data.length} –∑–∞–ø–∏—Å–µ–π)`);
                updatedCount++;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
                
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${ticker}: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        }
        
        logger.info('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        logger.info(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} —Ç–∏–∫–µ—Ä–æ–≤`);
        logger.info(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ç–∏–∫–µ—Ä–æ–≤`);
        logger.info(`  üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: ${STATS_DIR}/`);
        
    } catch (error) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : 'Unknown error');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 