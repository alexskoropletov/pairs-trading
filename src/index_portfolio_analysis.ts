import * as fs from 'fs-extra';
import path from 'path';
import { Portfolio, EfficientFrontierPoint, AssetStats } from './types';
import { sp500StocksFallback, nasdaq100StocksFallback, imoexStocksFallback, rucbitrStocksFallback, rgbiStocksFallback } from './stock';
import { ensureTickerDirectories } from './utils';
import logger from './logger';

const STATS_DIR = 'stats';
const TICKERS_DIR = 'tickers';

interface IndexPortfolioAnalysis {
    indexName: string;
    emoji: string;
    totalAssets: number;
    portfolio: Portfolio;
    efficientFrontier: EfficientFrontierPoint[];
    analysisDate: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ç–∏–∫–µ—Ä–∞
function getTickerIndex(symbol: string): 'sp500' | 'nasdaq' | 'imoex' | 'rucbitr' | 'rgbi' {
    const sp500Symbols = sp500StocksFallback.map(stock => stock.symbol);
    const nasdaqSymbols = nasdaq100StocksFallback.map(stock => stock.symbol);
    const imoexSymbols = imoexStocksFallback.map(stock => stock.symbol);
    const rucbitrSymbols = rucbitrStocksFallback.map(stock => stock.symbol);
    const rgbiSymbols = rgbiStocksFallback.map(stock => stock.symbol);
    
    if (rgbiSymbols.includes(symbol)) {
        return 'rgbi';
    } else if (rucbitrSymbols.includes(symbol)) {
        return 'rucbitr';
    } else if (imoexSymbols.includes(symbol)) {
        return 'imoex';
    } else if (nasdaqSymbols.includes(symbol)) {
        return 'nasdaq';
    } else if (sp500Symbols.includes(symbol)) {
        return 'sp500';
    } else {
        return 'sp500';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
async function getTickersFromIndexReport(indexName: string): Promise<string[]> {
    try {
        const reportPath = path.join(STATS_DIR, 'index_reports', `${indexName.toLowerCase()}_pairs_analysis.json`);
        
        if (!await fs.pathExists(reportPath)) {
            logger.warn(`‚ö†Ô∏è –û—Ç—á–µ—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ ${indexName} –Ω–µ –Ω–∞–π–¥–µ–Ω: ${reportPath}`);
            return [];
        }
        
        const report = await fs.readJson(reportPath);
        const tickers = new Set<string>();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ç–æ–ø-–ø–∞—Ä
        if (report.topPairs && Array.isArray(report.topPairs)) {
            report.topPairs.forEach((pair: any) => {
                if (pair.asset1) tickers.add(pair.asset1);
                if (pair.asset2) tickers.add(pair.asset2);
            });
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–∞—Ö
        if (report.assetsInfo && Array.isArray(report.assetsInfo)) {
            report.assetsInfo.forEach((asset: any) => {
                if (asset.symbol) tickers.add(asset.symbol);
            });
        }
        
        const tickerArray = Array.from(tickers);
        logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ ${tickerArray.length} —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è ${indexName}: ${tickerArray.join(', ')}`);
        return tickerArray;
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è ${indexName}:`, error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
async function readCSV(symbol: string): Promise<any[]> {
    try {
        const index = getTickerIndex(symbol);
        let dir: string;
        
        switch (index) {
            case 'sp500':
                dir = path.join(TICKERS_DIR, 'sp500');
                break;
            case 'nasdaq':
                dir = path.join(TICKERS_DIR, 'nasdaq');
                break;
            case 'imoex':
                dir = path.join(TICKERS_DIR, 'imoex');
                break;
            case 'rucbitr':
                dir = path.join(TICKERS_DIR, 'rucbitr');
                break;
            case 'rgbi':
                dir = path.join(TICKERS_DIR, 'rgbi');
                break;
            default:
                dir = path.join(TICKERS_DIR, 'sp500');
        }
        
        const csvPath = path.join(dir, `${symbol}.csv`);
        
        if (!await fs.pathExists(csvPath)) {
            throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvPath}`);
        }
        
        const csvContent = await fs.readFile(csvPath, 'utf-8');
        const lines = csvContent.split('\n').filter(line => line.trim());
        
        if (lines.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª–µ');
        }
        
        const headers = lines[0].split(',');
        const data = [];
        
        for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',');
            const row: any = {};
            
            headers.forEach((header, index) => {
                row[header.trim()] = values[index] ? parseFloat(values[index]) : 0;
            });
            
            data.push(row);
        }
        
        return data;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV –¥–ª—è ${symbol}: ${error}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
function calculateReturns(prices: number[]): number[] {
    const returns = [];
    for (let i = 1; i < prices.length; i++) {
        const return_val = (prices[i] - prices[i - 1]) / prices[i - 1];
        returns.push(return_val);
    }
    return returns;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
function calculateCovarianceMatrix(returnsMatrix: number[][]): number[][] {
    const n = returnsMatrix.length;
    const minLength = Math.min(...returnsMatrix.map(row => row.length));
    
    // –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Ä—è–¥—ã –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    const normalizedReturns = returnsMatrix.map(row => row.slice(-minLength));
    
    const covarianceMatrix: number[][] = [];
    
    for (let i = 0; i < n; i++) {
        covarianceMatrix[i] = [];
        for (let j = 0; j < n; j++) {
            if (i === j) {
                // –î–∏—Å–ø–µ—Ä—Å–∏—è
                const mean = normalizedReturns[i].reduce((sum, val) => sum + val, 0) / minLength;
                const variance = normalizedReturns[i].reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / minLength;
                covarianceMatrix[i][j] = variance;
            } else {
                // –ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è
                const mean1 = normalizedReturns[i].reduce((sum, val) => sum + val, 0) / minLength;
                const mean2 = normalizedReturns[j].reduce((sum, val) => sum + val, 0) / minLength;
                
                let covariance = 0;
                for (let k = 0; k < minLength; k++) {
                    covariance += (normalizedReturns[i][k] - mean1) * (normalizedReturns[j][k] - mean2);
                }
                covarianceMatrix[i][j] = covariance / minLength;
            }
        }
    }
    
    return covarianceMatrix;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º
function optimizePortfolioMinRisk(covarianceMatrix: number[][], expectedReturns: number[]): Portfolio {
    const n = covarianceMatrix.length;
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞
    const weights = new Array(n).fill(1 / n);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∏—Å–∫ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
    let portfolioRisk = 0;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            portfolioRisk += weights[i] * weights[j] * covarianceMatrix[i][j];
        }
    }
    portfolioRisk = Math.sqrt(portfolioRisk);
    
    const portfolioReturn = weights.reduce((sum, weight, i) => sum + weight * expectedReturns[i], 0);
    
    return {
        weights,
        expectedReturn: portfolioReturn,
        risk: portfolioRisk,
        sharpeRatio: portfolioReturn / portfolioRisk
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
async function analyzeIndexPortfolio(indexName: string, emoji: string): Promise<IndexPortfolioAnalysis | null> {
    try {
        logger.info(`üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ ${emoji} ${indexName}...`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        const symbols = await getTickersFromIndexReport(indexName);
        
        if (symbols.length < 2) {
            logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è ${indexName}: ${symbols.length}`);
            return null;
        }
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        const allData: Record<string, AssetStats> = {};
        const returnsMatrix: number[][] = [];
        const expectedReturns: number[] = [];
        
        for (const symbol of symbols) {
            try {
                logger.info(`üìà –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}...`);
                const data = await readCSV(symbol);
                
                if (data.length < 30) {
                    logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
                const prices = data.map(row => row.Close).filter(price => price > 0);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                const returns = calculateReturns(prices);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–µ–µ)
                const avgReturn = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;
                
                allData[symbol] = {
                    symbol,
                    prices,
                    returns,
                    avgReturn,
                    mean: avgReturn,
                    stdDev: Math.sqrt(returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length),
                    variance: returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
                };
                
                returnsMatrix.push(returns);
                expectedReturns.push(avgReturn);
                
                logger.info(`‚úÖ ${symbol}: ${returns.length} –¥–Ω–µ–π, —Å—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${(avgReturn * 100).toFixed(2)}%`);
                
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${symbol}: ${error}`);
            }
        }
        
        if (returnsMatrix.length < 2) {
            logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è ${indexName}`);
            return null;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        const covarianceMatrix = calculateCovarianceMatrix(returnsMatrix);
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        const portfolio = optimizePortfolioMinRisk(covarianceMatrix, expectedReturns);
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        const efficientFrontier: EfficientFrontierPoint[] = [];
        for (let i = 0; i <= 10; i++) {
            const risk = portfolio.risk * (0.5 + i * 0.1);
            const return_val = portfolio.expectedReturn * (0.8 + i * 0.04);
            efficientFrontier.push({
                risk,
                return: return_val,
                weights: portfolio.weights
            });
        }
        
        const analysis: IndexPortfolioAnalysis = {
            indexName,
            emoji,
            totalAssets: returnsMatrix.length,
            portfolio,
            efficientFrontier,
            analysisDate: new Date().toISOString()
        };
        
        logger.info(`‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è ${indexName} –∑–∞–≤–µ—Ä—à–µ–Ω: ${returnsMatrix.length} –∞–∫—Ç–∏–≤–æ–≤, —Ä–∏—Å–∫: ${(portfolio.risk * 100).toFixed(2)}%, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${(portfolio.expectedReturn * 100).toFixed(2)}%`);
        
        return analysis;
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è ${indexName}:`, error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
async function savePortfolioReport(analysis: IndexPortfolioAnalysis): Promise<void> {
    try {
        const reportsDir = path.join(STATS_DIR, 'portfolio_reports');
        await fs.ensureDir(reportsDir);
        
        const reportPath = path.join(reportsDir, `${analysis.indexName.toLowerCase()}_portfolio_analysis.json`);
        await fs.writeJson(reportPath, analysis, { spaces: 2 });
        
        logger.info(`üíæ –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é ${analysis.indexName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é ${analysis.indexName}:`, error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayPortfolioResults(analysis: IndexPortfolioAnalysis): void {
    logger.info(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ü–û–†–¢–§–ï–õ–Ø ${analysis.emoji} ${analysis.indexName}:`);
    logger.info('=' .repeat(50));
    logger.info(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤: ${analysis.totalAssets}`);
    logger.info(`–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${(analysis.portfolio.expectedReturn * 100).toFixed(2)}%`);
    logger.info(`–†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å): ${(analysis.portfolio.risk * 100).toFixed(2)}%`);
    logger.info(`–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: ${analysis.portfolio.sharpeRatio.toFixed(4)}`);
    logger.info(`–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: ${analysis.analysisDate}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ –≤—Å–µ–º –∏–Ω–¥–µ–∫—Å–∞–º
export async function analyzeAllIndexPortfolios(): Promise<void> {
    logger.info('üéØ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        await fs.ensureDir(STATS_DIR);
        await ensureTickerDirectories();
        
        const indexes = [
            { name: 'S&P500', emoji: 'üá∫üá∏' },
            { name: 'NASDAQ', emoji: 'üìà' },
            { name: 'IMOEX', emoji: 'üá∑üá∫' },
            { name: 'RUCBITR', emoji: 'üè¢' },
            { name: 'RGBI', emoji: 'üìà' }
        ];
        
        const analyses: IndexPortfolioAnalysis[] = [];
        
        for (const index of indexes) {
            const analysis = await analyzeIndexPortfolio(index.name, index.emoji);
            if (analysis) {
                analyses.push(analysis);
                await savePortfolioReport(analysis);
                displayPortfolioResults(analysis);
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        if (analyses.length > 0) {
            const summary = {
                totalIndexes: analyses.length,
                totalAssets: analyses.reduce((sum, analysis) => sum + analysis.totalAssets, 0),
                averageReturn: analyses.reduce((sum, analysis) => sum + analysis.portfolio.expectedReturn, 0) / analyses.length,
                averageRisk: analyses.reduce((sum, analysis) => sum + analysis.portfolio.risk, 0) / analyses.length,
                indexes: analyses.map(analysis => ({
                    name: analysis.indexName,
                    emoji: analysis.emoji,
                    totalAssets: analysis.totalAssets,
                    expectedReturn: analysis.portfolio.expectedReturn,
                    risk: analysis.portfolio.risk,
                    sharpeRatio: analysis.portfolio.sharpeRatio
                })),
                analysisDate: new Date().toISOString()
            };
            
            const summaryPath = path.join(STATS_DIR, 'portfolio_reports', 'summary.json');
            await fs.writeJson(summaryPath, summary, { spaces: 2 });
            
            logger.info('\nüìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–û–†–¢–§–ï–õ–Ø–ú:');
            logger.info('=' .repeat(40));
            logger.info(`–í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${summary.totalIndexes}`);
            logger.info(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤: ${summary.totalAssets}`);
            logger.info(`–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${(summary.averageReturn * 100).toFixed(2)}%`);
            logger.info(`–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: ${(summary.averageRisk * 100).toFixed(2)}%`);
            
            summary.indexes.forEach(index => {
                logger.info(`${index.emoji} ${index.name}: ${index.totalAssets} –∞–∫—Ç–∏–≤–æ–≤, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${(index.expectedReturn * 100).toFixed(2)}%, —Ä–∏—Å–∫ ${(index.risk * 100).toFixed(2)}%`);
            });
        }
        
        logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    analyzeAllIndexPortfolios().catch(error => {
        logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
} 