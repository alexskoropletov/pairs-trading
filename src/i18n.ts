// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
interface Translations {
  [key: string]: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
interface LanguageConfig {
  [key: string]: Translations;
}

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
export type SupportedLanguage = 'ru' | 'en';

// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const translations: LanguageConfig = {
  ru: {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    'pairs_trading_analysis': '–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
    'correlated_pairs_analysis': '–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∞–∫—Ü–∏–π',
    'index_analysis': '–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–∞',
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    'total_pairs': '–í—Å–µ–≥–æ –ø–∞—Ä',
    'average_correlation': '–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
    'max_correlation': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
    'min_correlation': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
    'correlation_threshold': '–ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
    
    // –ò–Ω–¥–µ–∫—Å—ã
    'sp500': 'S&P500',
    'nasdaq': 'NASDAQ',
    'imoex': 'IMOEX',
    'rucbitr': 'RUCBITR',
    'rgbi': 'RGBI',
    
    // –¢–∞–±–ª–∏—Ü—ã
    'top_pairs': '–¢–æ–ø –ø–∞—Ä—ã',
    'asset_pair': '–ü–∞—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤',
    'correlation': '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
    'strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
    'volatility': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
    'avg_return': '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
    'current_price': '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞',
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
    'long_short': 'Long/Short',
    'short_long': 'Short/Long',
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ö
    'assets_info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ö',
    'symbol': '–°–∏–º–≤–æ–ª',
    'price': '–¶–µ–Ω–∞',
    'index': '–ò–Ω–¥–µ–∫—Å',
    
    // –ì—Ä–∞—Ñ–∏–∫–∏
    'correlation_distribution': '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π',
    'correlation_value': '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
    'number_of_pairs': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä',
    
    // –§—É—Ç–µ—Ä
    'generated_on': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
    'analysis_date': '–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞',
    
    // –°–æ–æ–±—â–µ–Ω–∏—è
    'no_data_available': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    'insufficient_data': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
    'analysis_completed': '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
    
    // –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤
    'sp500_emoji': 'üá∫üá∏',
    'nasdaq_emoji': 'üìà',
    'imoex_emoji': 'üá∑üá∫',
    'rucbitr_emoji': 'üè¢',
    'rgbi_emoji': 'üìà',
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    'percentage_format': '{value}%',
    'date_format': 'DD.MM.YYYY',
    'time_format': 'HH:mm:ss',
    
    // –û—à–∏–±–∫–∏
    'error_loading_data': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
    'error_generating_infographic': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏',
    'error_saving_file': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞'
  },
  
  en: {
    // Headers
    'pairs_trading_analysis': 'Pairs Trading Analysis',
    'correlated_pairs_analysis': 'Correlated Pairs Analysis',
    'index_analysis': 'Index Analysis',
    
    // Statistics
    'total_pairs': 'Total Pairs',
    'average_correlation': 'Average Correlation',
    'max_correlation': 'Max Correlation',
    'min_correlation': 'Min Correlation',
    'correlation_threshold': 'Correlation Threshold',
    
    // Indices
    'sp500': 'S&P500',
    'nasdaq': 'NASDAQ',
    'imoex': 'IMOEX',
    'rucbitr': 'RUCBITR',
    'rgbi': 'RGBI',
    
    // Tables
    'top_pairs': 'Top Pairs',
    'asset_pair': 'Asset Pair',
    'correlation': 'Correlation',
    'strategy': 'Strategy',
    'volatility': 'Volatility',
    'avg_return': 'Avg Return',
    'current_price': 'Current Price',
    
    // Strategies
    'long_short': 'Long/Short',
    'short_long': 'Short/Long',
    
    // Assets info
    'assets_info': 'Assets Information',
    'symbol': 'Symbol',
    'price': 'Price',
    'index': 'Index',
    
    // Charts
    'correlation_distribution': 'Correlation Distribution',
    'correlation_value': 'Correlation Value',
    'number_of_pairs': 'Number of Pairs',
    
    // Footer
    'generated_on': 'Generated on',
    'analysis_date': 'Analysis Date',
    
    // Messages
    'no_data_available': 'No data available',
    'insufficient_data': 'Insufficient data',
    'analysis_completed': 'Analysis completed',
    
    // Emojis for indices
    'sp500_emoji': 'üá∫üá∏',
    'nasdaq_emoji': 'üìà',
    'imoex_emoji': 'üá∑üá∫',
    'rucbitr_emoji': 'üè¢',
    'rgbi_emoji': 'üìà',
    
    // Formatting
    'percentage_format': '{value}%',
    'date_format': 'MM/DD/YYYY',
    'time_format': 'HH:mm:ss',
    
    // Errors
    'error_loading_data': 'Error loading data',
    'error_generating_infographic': 'Error generating infographic',
    'error_saving_file': 'Error saving file'
  }
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
export class I18n {
  private currentLanguage: SupportedLanguage;
  private fallbackLanguage: SupportedLanguage = 'ru';

  constructor(language: SupportedLanguage = 'ru') {
    this.currentLanguage = this.isValidLanguage(language) ? language : this.fallbackLanguage;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞
  private isValidLanguage(language: string): language is SupportedLanguage {
    return language === 'ru' || language === 'en';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
  public t(key: string, params?: Record<string, string | number>): string {
    const translation = translations[this.currentLanguage]?.[key] || 
                      translations[this.fallbackLanguage]?.[key] || 
                      key;

    if (params) {
      return this.interpolate(translation, params);
    }

    return translation;
  }

  // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
  private interpolate(text: string, params: Record<string, string | number>): string {
    return text.replace(/\{(\w+)\}/g, (match, key) => {
      return params[key]?.toString() || match;
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  public getCurrentLanguage(): SupportedLanguage {
    return this.currentLanguage;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
  public setLanguage(language: SupportedLanguage): void {
    if (this.isValidLanguage(language)) {
      this.currentLanguage = language;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
  public getIndexEmoji(indexName: string): string {
    const emojiKey = `${indexName.toLowerCase()}_emoji`;
    return this.t(emojiKey) || 'üìä';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
  public formatPercentage(value: number): string {
    return this.t('percentage_format', { value: value.toFixed(2) });
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  public formatDate(date: Date): string {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    
    if (this.currentLanguage === 'en') {
      return `${month}/${day}/${year}`;
    } else {
      return `${day}.${month}.${year}`;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
  public static getSupportedLanguages(): SupportedLanguage[] {
    return ['ru', 'en'];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —è–∑—ã–∫–∞
  public static isLanguageSupported(language: string): language is SupportedLanguage {
    return I18n.getSupportedLanguages().includes(language as SupportedLanguage);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
export function getLanguageFromArgs(): SupportedLanguage {
  const languageArg = process.argv.find(arg => arg.startsWith('--lang=') || arg.startsWith('--language='));
  
  if (languageArg) {
    const language = languageArg.split('=')[1];
    if (I18n.isLanguageSupported(language)) {
      return language as SupportedLanguage;
    }
  }
  
  return 'ru'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ i18n —Å —è–∑—ã–∫–æ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
export function createI18n(): I18n {
  const language = getLanguageFromArgs();
  return new I18n(language);
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default I18n; 