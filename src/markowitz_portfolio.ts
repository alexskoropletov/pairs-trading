import * as fs from 'fs-extra';
import path from 'path';
import { 
    StockData, 
    Portfolio, 
    EfficientFrontierPoint, 
    PortfolioSummary, 
    AssetStats, 
    CSVRow, 
    csvRowToStockData,
} from './types';
import { stockSymbols } from './stock';
import logger from './logger';

// –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
const STATS_DIR = 'stats';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ pairs_trading –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤
async function getTickersFromPairsTrading(): Promise<string[]> {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã pairs_trading
        const pairsData = await fs.readJson(path.join(STATS_DIR, 'pairs_analysis.json'));
        
        if (pairsData && pairsData.topPairs && Array.isArray(pairsData.topPairs)) {
            const tickers = new Set<string>();
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ç–æ–ø-–ø–∞—Ä
            pairsData.topPairs.forEach((pair: any) => {
                if (pair.asset1) tickers.add(pair.asset1);
                if (pair.asset2) tickers.add(pair.asset2);
            });
            
            const tickerArray = Array.from(tickers);
            logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ ${tickerArray.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ pairs_trading: ${tickerArray.join(', ')}`);
            return tickerArray;
        }
    } catch (error) {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å pairs_analysis.json, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã');
    }
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
    logger.info('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã');
    return stockSymbols;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
async function readCSV(symbol: string): Promise<StockData[]> {
    try {
        const csvPath = path.join(STATS_DIR, `${symbol}.csv`);
        const csvContent = await fs.readFile(csvPath, 'utf-8');
        const lines = csvContent.split('\n');
        const headers = lines[0].split(',');
        
        const data: StockData[] = [];
        for (let i = 1; i < lines.length; i++) {
            if (lines[i].trim()) {
                const values = lines[i].split(',');
                const row: CSVRow = {};
                headers.forEach((header: string, index: number) => {
                    row[header.trim()] = values[index] ? parseFloat(values[index]) : 0;
                });
                data.push(csvRowToStockData(row));
            }
        }
        
        return data;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${symbol}.csv: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
function calculateReturns(prices: number[]): number[] {
    const returns: number[] = [];
    for (let i = 1; i < prices.length; i++) {
        const return_val = (prices[i] - prices[i - 1]) / prices[i - 1];
        returns.push(return_val);
    }
    return returns;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
function calculateCovarianceMatrix(returnsMatrix: number[][]): number[][] {
    const numAssets = returnsMatrix.length;
    
    if (numAssets === 0) {
        throw new Error('–ü—É—Å—Ç–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π');
    }
    
    const numDays = returnsMatrix[0].length;
    
    if (numDays === 0) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—è—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
    for (let assetIndex = 1; assetIndex < numAssets; assetIndex++) {
        if (returnsMatrix[assetIndex].length !== numDays) {
            throw new Error(`–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö: —Å—Ç—Ä–æ–∫–∞ 0 –∏–º–µ–µ—Ç ${numDays} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—Ç—Ä–æ–∫–∞ ${assetIndex} –∏–º–µ–µ—Ç ${returnsMatrix[assetIndex].length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const means: number[] = [];
    for (let assetIndex = 0; assetIndex < numAssets; assetIndex++) {
        const validReturns = returnsMatrix[assetIndex].filter(r => isFinite(r) && !isNaN(r));
        if (validReturns.length === 0) {
            throw new Error(`–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞ ${assetIndex}`);
        }
        const sum = validReturns.reduce((a, b) => a + b, 0);
        means.push(sum / validReturns.length);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
    const covarianceMatrix: number[][] = [];
    for (let assetIndex = 0; assetIndex < numAssets; assetIndex++) {
        covarianceMatrix[assetIndex] = [];
        for (let otherIndex = 0; otherIndex < numAssets; otherIndex++) {
            let sum = 0;
            let count = 0;
            
            for (let dayIndex = 0; dayIndex < numDays; dayIndex++) {
                const ri = returnsMatrix[assetIndex][dayIndex];
                const rj = returnsMatrix[otherIndex][dayIndex];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if (isFinite(ri) && !isNaN(ri) && isFinite(rj) && !isNaN(rj)) {
                    sum += (ri - means[assetIndex]) * (rj - means[otherIndex]);
                    count++;
                }
            }
            
            if (count === 0) {
                throw new Error(`–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ ${assetIndex} –∏ ${otherIndex}`);
            }
            
            covarianceMatrix[assetIndex][otherIndex] = sum / (count - 1);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (!isFinite(covarianceMatrix[assetIndex][otherIndex])) {
                throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ ${assetIndex} –∏ ${otherIndex}: ${covarianceMatrix[assetIndex][otherIndex]}`);
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–∏—Å–ø–µ—Ä—Å–∏–∏) –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
    for (let assetIndex = 0; assetIndex < numAssets; assetIndex++) {
        if (covarianceMatrix[assetIndex][assetIndex] <= 0) {
            logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞ ${assetIndex}: ${covarianceMatrix[assetIndex][assetIndex]}`);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é
            covarianceMatrix[assetIndex][assetIndex] = 1e-6;
        }
    }
    
    return covarianceMatrix;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
function calculatePortfolioRisk(weights: number[], covarianceMatrix: number[][]): number {
    let risk = 0;
    const numAssets = weights.length;
    
    for (let assetIndex = 0; assetIndex < numAssets; assetIndex++) {
        for (let otherIndex = 0; otherIndex < numAssets; otherIndex++) {
            risk += weights[assetIndex] * weights[otherIndex] * covarianceMatrix[assetIndex][otherIndex];
        }
    }
    
    return Math.sqrt(risk);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
function calculatePortfolioReturn(weights: number[], expectedReturns: number[]): number {
    return weights.reduce((sum, weight, assetIndex) => {
        return sum + weight * expectedReturns[assetIndex];
    }, 0);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º
function optimizePortfolioMinRisk(covarianceMatrix: number[][], expectedReturns: number[]): Portfolio {
    const numAssets = covarianceMatrix.length;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (numAssets === 0 || expectedReturns.length !== numAssets) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    for (let assetIndex = 0; assetIndex < numAssets; assetIndex++) {
        if (covarianceMatrix[assetIndex][assetIndex] <= 0) {
            throw new Error(`–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –Ω—É–ª–µ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞ ${assetIndex}`);
        }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
    let weights = new Array(numAssets).fill(1 / numAssets);
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —É–ª—É—á—à–∞–µ–º –≤–µ—Å–∞
    const maxIterations = 200;
    const tolerance = 1e-8;
    const stepSize = 0.001; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞
    
    for (let iteration = 0; iteration < maxIterations; iteration++) {
        const currentRisk = calculatePortfolioRisk(weights, covarianceMatrix);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∏—Å–∫–∞
        if (!isFinite(currentRisk) || currentRisk <= 0) {
            logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∏—Å–∫ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}: ${currentRisk}`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–≤–Ω—ã–º –≤–µ—Å–∞–º
            weights = new Array(numAssets).fill(1 / numAssets);
            break;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ä–∏—Å–∫–∞ –ø–æ –≤–µ—Å–∞–º
        const gradient = new Array(numAssets).fill(0);
        
        for (let assetIndex = 0; assetIndex < numAssets; assetIndex++) {
            for (let otherIndex = 0; otherIndex < numAssets; otherIndex++) {
                gradient[assetIndex] += weights[otherIndex] * covarianceMatrix[assetIndex][otherIndex];
            }
            gradient[assetIndex] /= currentRisk;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        const gradientNorm = Math.sqrt(gradient.reduce((sum, g) => sum + g * g, 0));
        if (!isFinite(gradientNorm) || gradientNorm === 0) {
            logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}`);
            break;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∏—Å–∫–∞
        let newWeights = weights.map((weight, assetIndex) => weight - stepSize * gradient[assetIndex]);
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ (—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1)
        const sum = newWeights.reduce((a, b) => a + b, 0);
        if (sum <= 0 || !isFinite(sum)) {
            logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –≤–µ—Å–æ–≤: ${sum}`);
            break;
        }
        
        newWeights = newWeights.map(w => w / sum);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã
        const hasInvalidWeights = newWeights.some(w => !isFinite(w) || w < 0);
        if (hasInvalidWeights) {
            logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–µ—Å–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}`);
            break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å
        const newRisk = calculatePortfolioRisk(newWeights, covarianceMatrix);
        if (Math.abs(currentRisk - newRisk) < tolerance) {
            logger.info(`‚úÖ –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}`);
            break;
        }
        
        weights = newWeights;
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤
    const finalRisk = calculatePortfolioRisk(weights, covarianceMatrix);
    const finalReturn = calculatePortfolioReturn(weights, expectedReturns);
    
    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞
    if (!isFinite(finalRisk) || !isFinite(finalReturn) || finalRisk <= 0) {
        logger.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π');
        weights = new Array(numAssets).fill(1 / numAssets);
        const equalRisk = calculatePortfolioRisk(weights, covarianceMatrix);
        const equalReturn = calculatePortfolioReturn(weights, expectedReturns);
        
        return {
            weights,
            expectedReturn: equalReturn,
            risk: equalRisk,
            sharpeRatio: equalReturn / equalRisk
        };
    }
    
    return {
        weights,
        expectedReturn: finalReturn,
        risk: finalRisk,
        sharpeRatio: finalReturn / finalRisk
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
function generateEfficientFrontier(covarianceMatrix: number[][], expectedReturns: number[], numPoints = 20): EfficientFrontierPoint[] {
    const numAssets = covarianceMatrix.length;
    const frontier: EfficientFrontierPoint[] = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    const minReturn = Math.min(...expectedReturns);
    const maxReturn = Math.max(...expectedReturns);
    
    for (let i = 0; i < numPoints; i++) {
        const targetReturn = minReturn + (maxReturn - minReturn) * i / (numPoints - 1);
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        let weights = new Array(numAssets).fill(1 / numAssets);
        const maxIterations = 50;
        
        for (let iter = 0; iter < maxIterations; iter++) {
            const currentReturn = calculatePortfolioReturn(weights, expectedReturns);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const returnDiff = targetReturn - currentReturn;
            const adjustment = returnDiff * 0.1;
            
            // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            const maxReturnIndex = expectedReturns.indexOf(Math.max(...expectedReturns));
            weights[maxReturnIndex] += adjustment;
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
            const sum = weights.reduce((a, b) => a + b, 0);
            weights = weights.map(w => w / sum);
            
            if (Math.abs(returnDiff) < 1e-4) break;
        }
        
        const risk = calculatePortfolioRisk(weights, covarianceMatrix);
        frontier.push({
            return: targetReturn,
            risk: risk,
            weights: [...weights]
        });
    }
    
    return frontier;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
    try {
        logger.info('üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ú–∞—Ä–∫–æ–≤–∏—Ü–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ pairs_trading
        const symbols = await getTickersFromPairsTrading();
        
        logger.info(`üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${symbols.length} –∞–∫—Ç–∏–≤–æ–≤...`);
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        const allData: Record<string, AssetStats> = {};
        const returnsMatrix: number[][] = [];
        const expectedReturns: number[] = [];
        
        for (const symbol of symbols) {
            try {
                logger.info(`üìà –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}...`);
                const data = await readCSV(symbol);
                
                if (data.length < 30) {
                    logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
                const prices = data.map(row => row.Close).filter(price => price > 0);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                const returns = calculateReturns(prices);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–µ–µ)
                const avgReturn = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const mean = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;
                const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - mean, 2), 0) / returns.length;
                const stdDev = Math.sqrt(variance);
                
                allData[symbol] = {
                    symbol,
                    prices,
                    returns,
                    avgReturn,
                    mean,
                    stdDev,
                    variance
                };
                
                returnsMatrix.push(returns);
                expectedReturns.push(avgReturn);
                
                logger.info(`‚úÖ ${symbol}: ${returns.length} –¥–Ω–µ–π, —Å—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${(avgReturn * 100).toFixed(2)}%`);
                
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${symbol}: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        }
        
        if (returnsMatrix.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è');
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
        const minLength = Math.min(...returnsMatrix.map(row => row.length));
        logger.info(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:`);
        logger.info(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤: ${returnsMatrix.length}`);
        logger.info(`  –ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ${returnsMatrix.map(row => row.length).join(', ')}`);
        logger.info(`  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${minLength}`);
        
        // –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        logger.info('\n‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã...');
        const normalizedReturnsMatrix = returnsMatrix.map(row => row.slice(-minLength));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        logger.info('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:');
        for (let i = 0; i < normalizedReturnsMatrix.length; i++) {
            const symbol = Object.keys(allData)[i];
            const returns = normalizedReturnsMatrix[i];
            const validReturns = returns.filter(r => isFinite(r) && !isNaN(r));
            const invalidReturns = returns.length - validReturns.length;
            
            logger.info(`  ${symbol}: ${validReturns.length}/${returns.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π`);
            if (invalidReturns > 0) {
                logger.warn(`    ‚ö†Ô∏è ${invalidReturns} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π`);
            }
            
            if (validReturns.length > 0) {
                const mean = validReturns.reduce((sum, r) => sum + r, 0) / validReturns.length;
                const variance = validReturns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / validReturns.length;
                logger.info(`    –°—Ä–µ–¥–Ω–µ–µ: ${(mean * 100).toFixed(4)}%, –î–∏—Å–ø–µ—Ä—Å–∏—è: ${(variance * 10000).toFixed(4)}`);
            }
        }
        
        logger.info('\nüîß –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É...');
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        const covarianceMatrix = calculateCovarianceMatrix(normalizedReturnsMatrix);
        
        logger.info('‚úÖ –ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞');
        logger.info(`  –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: ${covarianceMatrix.length}x${covarianceMatrix[0].length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–∏—Å–ø–µ—Ä—Å–∏–∏)
        logger.info('\nüìä –î–∏—Å–ø–µ—Ä—Å–∏–∏ –∞–∫—Ç–∏–≤–æ–≤:');
        for (let i = 0; i < covarianceMatrix.length; i++) {
            const symbol = Object.keys(allData)[i];
            const variance = covarianceMatrix[i][i];
            logger.info(`  ${symbol}: ${(variance * 10000).toFixed(4)}`);
        }
        
        logger.info('üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º...');
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        const portfolio = optimizePortfolioMinRisk(covarianceMatrix, expectedReturns);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∞–∫—Ç–∏–≤–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        const validSymbols = Object.keys(allData);
        
        logger.info('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:');
        logger.info('=' .repeat(50));
        
        // –í—ã–≤–æ–¥–∏–º –≤–µ—Å–∞ –∞–∫—Ç–∏–≤–æ–≤
        logger.info('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤:');
        portfolio.weights.forEach((weight, index) => {
            const symbol = validSymbols[index];
            const percentage = (weight * 100).toFixed(2);
            logger.info(`  ${symbol}: ${percentage}%`);
        });
        
        logger.info('\nüìà –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:');
        logger.info(`  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${(portfolio.expectedReturn * 100).toFixed(2)}%`);
        logger.info(`  –†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å): ${(portfolio.risk * 100).toFixed(2)}%`);
        logger.info(`  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: ${portfolio.sharpeRatio.toFixed(3)}`);
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É
        logger.info('\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É...');
        const efficientFrontier = generateEfficientFrontier(covarianceMatrix, expectedReturns);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
        const portfolioData = validSymbols.map((symbol, index) => ({
            Symbol: symbol,
            Weight: portfolio.weights[index],
            WeightPercent: (portfolio.weights[index] * 100).toFixed(2) + '%',
            ExpectedReturn: (expectedReturns[index] * 100).toFixed(2) + '%'
        }));
        
        const csvContent = [
            'Symbol,Weight,Weight (%),Expected Return (%)',
            ...portfolioData.map(row => `${row.Symbol},${row.Weight},${row.WeightPercent},${row.ExpectedReturn}`)
        ].join('\n');
        
        await fs.writeFile(path.join(STATS_DIR, 'markowitz_portfolio.csv'), csvContent, 'utf-8');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É
        const frontierData = efficientFrontier.map((point, index) => ({
            Point: index + 1,
            Return: (point.return * 100).toFixed(2) + '%',
            Risk: (point.risk * 100).toFixed(2) + '%',
            SharpeRatio: (point.return / point.risk).toFixed(3)
        }));
        
        const frontierContent = [
            'Point,Return (%),Risk (%),Sharpe Ratio',
            ...frontierData.map(row => `${row.Point},${row.Return},${row.Risk},${row.SharpeRatio}`)
        ].join('\n');
        
        await fs.writeFile(path.join(STATS_DIR, 'efficient_frontier.csv'), frontierContent, 'utf-8');
        
        logger.info(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:`);
        logger.info(`  üìÑ ${STATS_DIR}/markowitz_portfolio.csv`);
        logger.info(`  üìÑ ${STATS_DIR}/efficient_frontier.csv`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        const portfolioSummary: PortfolioSummary = {
            totalAssets: validSymbols.length,
            portfolioReturn: portfolio.expectedReturn,
            portfolioRisk: portfolio.risk,
            sharpeRatio: portfolio.sharpeRatio,
            weights: portfolio.weights,
            symbols: validSymbols,
            efficientFrontier: efficientFrontier,
            date: new Date().toISOString()
        };
        
        await fs.writeJson(path.join(STATS_DIR, 'portfolio_summary.json'), portfolioSummary, { spaces: 2 });
        logger.info(`  üìÑ ${STATS_DIR}/portfolio_summary.json`);
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : 'Unknown error');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 