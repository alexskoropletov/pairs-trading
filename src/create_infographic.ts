import * as fs from 'fs-extra';
import * as path from 'path';
import { createCanvas, Canvas, CanvasRenderingContext2D } from 'canvas';
import { I18n, createI18n } from './i18n';
import logger from './logger';

interface PairsAnalysis {
  totalPairs: number;
  sp500Pairs: number;
  nasdaqPairs: number;
  imoexPairs?: number;
  rucbitrPairs?: number;
  rgbiPairs?: number;
  averageCorrelation: number;
  maxCorrelation: number;
  minCorrelation: number;
  topPairs: Array<{
    asset1: string;
    asset2: string;
    correlation: number;
    strategy: string;
    index: string;
  }>;
  assetsInfo?: Array<{
    symbol: string;
    currentPrice: number;
    volatility: number;
    avgReturn: number;
    index: string;
    dividendYield?: number;
    couponRate?: number;
  }>;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
interface IndexAnalysis {
  indexName: string;
  totalPairs: number;
  averageCorrelation: number;
  maxCorrelation: number;
  minCorrelation: number;
  correlationThreshold: number;
  topPairs: Array<{
    asset1: string;
    asset2: string;
    correlation: number;
    strategy: string;
    volatility1: number;
    volatility2: number;
    avgReturn1: number;
    avgReturn2: number;
  }>;
  assetsInfo: Array<{
    symbol: string;
    currentPrice: number;
    volatility: number;
    avgReturn: number;
    index: string;
    dividendYield?: number;
    couponRate?: number;
  }>;
  analysisDate: string;
}

class InfographicGenerator {
  private canvas!: Canvas;
  private ctx!: CanvasRenderingContext2D;
  private infographicsDir: string;
  private width: number = 1200;
  private height: number = 1200; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
  private i18n: I18n;

  constructor() {
    this.infographicsDir = 'infographics';
    this.i18n = createI18n();
    this.ensureInfographicsDir();
    this.initializeCanvas();
  }

  private ensureInfographicsDir(): void {
    if (!fs.existsSync(this.infographicsDir)) {
      fs.mkdirSync(this.infographicsDir, { recursive: true });
      logger.info(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${this.infographicsDir}`);
    }
  }

  private initializeCanvas(): void {
    this.canvas = createCanvas(this.width, this.height);
    this.ctx = this.canvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
    this.ctx.fillStyle = '#ffffff';
    this.ctx.fillRect(0, 0, this.width, this.height);
  }

  private drawHeader(): void {
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 32px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText(this.i18n.t('pairs_trading_analysis'), this.width / 2, 40);
    
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.ctx.fillStyle = '#7f8c8d';
    this.ctx.font = '16px Arial';
    this.ctx.fillText(this.i18n.t('correlated_pairs_analysis'), this.width / 2, 65);
  }

  private drawSummaryStats(data: PairsAnalysis): void {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.drawBox(50, 100, 300, 120, '#ecf0f1', '#bdc3c7');
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.fillText(this.i18n.t('total_pairs'), 70, 125);
    
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = '14px Arial';
    this.ctx.fillText(`${this.i18n.t('total_pairs')}: ${data.totalPairs.toLocaleString()}`, 70, 150);
    this.ctx.fillText(`${this.i18n.t('sp500')}: ${data.sp500Pairs.toLocaleString()}`, 70, 170);
    this.ctx.fillText(`${this.i18n.t('nasdaq')}: ${data.nasdaqPairs.toLocaleString()}`, 70, 190);
    if (data.imoexPairs) {
      this.ctx.fillText(`${this.i18n.getIndexEmoji('imoex')} ${this.i18n.t('imoex')}: ${data.imoexPairs.toLocaleString()}`, 70, 210);
    }
    if (data.rucbitrPairs) {
      this.ctx.fillText(`${this.i18n.getIndexEmoji('rucbitr')} ${this.i18n.t('rucbitr')}: ${data.rucbitrPairs.toLocaleString()}`, 70, 230);
    }
    if (data.rgbiPairs) {
      this.ctx.fillText(`${this.i18n.getIndexEmoji('rgbi')} ${this.i18n.t('rgbi')}: ${data.rgbiPairs.toLocaleString()}`, 70, 250);
    }
    
    // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    this.drawBox(400, 100, 300, 120, '#e8f5e8', '#a8d5a8');
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.fillText(this.i18n.t('correlation'), 420, 125);
    
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = '14px Arial';
    this.ctx.fillText(`${this.i18n.t('average_correlation')}: ${this.i18n.formatPercentage(data.averageCorrelation * 100)}`, 420, 150);
    this.ctx.fillText(`${this.i18n.t('max_correlation')}: ${this.i18n.formatPercentage(data.maxCorrelation * 100)}`, 420, 170);
    this.ctx.fillText(`${this.i18n.t('min_correlation')}: ${this.i18n.formatPercentage(data.minCorrelation * 100)}`, 420, 190);
  }

  private drawTopPairsTable(data: PairsAnalysis): void {
    this.drawBox(50, 250, 1100, 300, '#f8f9fa', '#dee2e6');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.fillText(this.i18n.t('top_pairs'), 70, 280);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    const headers = ['–†–∞–Ω–≥', '–ê–∫—Ç–∏–≤ 1', '–ê–∫—Ç–∏–≤ 2', this.i18n.t('correlation'), this.i18n.t('strategy'), this.i18n.t('index')];
    const columnWidths = [80, 150, 150, 120, 300, 100];
    let currentX = 70;
    
    this.ctx.fillStyle = '#495057';
    this.ctx.font = 'bold 12px Arial';
    headers.forEach((header, index) => {
      this.ctx.fillText(header, currentX, 310);
      currentX += columnWidths[index];
    });
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    this.ctx.strokeStyle = '#dee2e6';
    this.ctx.lineWidth = 1;
    this.ctx.beginPath();
    this.ctx.moveTo(70, 320);
    this.ctx.lineTo(1150, 320);
    this.ctx.stroke();
    
    // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const topPairs = data.topPairs.slice(0, 10);
    topPairs.forEach((pair, index) => {
      const rowY = 340 + index * 25;
      currentX = 70;
      
      // –†–∞–Ω–≥
      this.ctx.fillStyle = '#6c757d';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(`${index + 1}`, currentX, rowY);
      currentX += columnWidths[0];
      
      // –ê–∫—Ç–∏–≤ 1
      this.ctx.fillStyle = '#007bff';
      this.ctx.font = 'bold 12px Arial';
      this.ctx.fillText(pair.asset1, currentX, rowY);
      currentX += columnWidths[1];
      
      // –ê–∫—Ç–∏–≤ 2
      this.ctx.fillStyle = '#dc3545';
      this.ctx.font = 'bold 12px Arial';
      this.ctx.fillText(pair.asset2, currentX, rowY);
      currentX += columnWidths[2];
      
      // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
      this.ctx.fillStyle = '#28a745';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(`${(pair.correlation * 100).toFixed(2)}%`, currentX, rowY);
      currentX += columnWidths[3];
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è
      this.ctx.fillStyle = '#6c757d';
      this.ctx.font = '11px Arial';
      this.ctx.fillText(pair.strategy, currentX, rowY);
      currentX += columnWidths[4];
      
      // –ò–Ω–¥–µ–∫—Å
      this.ctx.fillStyle = '#6c757d';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(pair.index, currentX, rowY);
    });
  }

  private drawCorrelationChart(data: PairsAnalysis): void {
    this.drawBox(50, 580, 1100, 180, '#ffffff', '#dee2e6');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 16px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText(this.i18n.t('correlation_distribution'), this.width / 2, 610);
    
    // –°–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    const topPairs = data.topPairs.slice(0, 8);
    const barWidth = 100;
    const barSpacing = 30;
    const maxHeight = 100;
    const startX = 100;
    const startY = 680;
    
    topPairs.forEach((pair, index) => {
      const barHeight = (pair.correlation / data.maxCorrelation) * maxHeight;
      const x = startX + index * (barWidth + barSpacing);
      const y = startY - barHeight;
      
      // –¶–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
      if (pair.correlation > 0.8) {
        this.ctx.fillStyle = '#28a745';
      } else if (pair.correlation > 0.6) {
        this.ctx.fillStyle = '#ffc107';
      } else {
        this.ctx.fillStyle = '#dc3545';
      }
      
      this.ctx.fillRect(x, y, barWidth, barHeight);
      this.ctx.strokeStyle = '#6c757d';
      this.ctx.lineWidth = 1;
      this.ctx.strokeRect(x, y, barWidth, barHeight);
      
      // –ü–æ–¥–ø–∏—Å–∏
      this.ctx.fillStyle = '#495057';
      this.ctx.font = '10px Arial';
      this.ctx.textAlign = 'center';
      this.ctx.fillText(`${pair.asset1}-${pair.asset2}`, x + barWidth / 2, startY + 15);
      this.ctx.fillText(`${(pair.correlation * 100).toFixed(1)}%`, x + barWidth / 2, startY + 30);
    });
  }

  private drawAssetsInfo(data: PairsAnalysis): void {
    if (!data.assetsInfo || data.assetsInfo.length === 0) {
      return;
    }

    this.drawBox(50, 780, 1100, 350, '#f8f9fa', '#dee2e6');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.fillText(this.i18n.t('assets_info'), 70, 810);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    const headers = [this.i18n.t('symbol'), this.i18n.t('price'), this.i18n.t('volatility'), this.i18n.t('avg_return'), '–î–∏–≤/–ö—É–ø–æ–Ω', this.i18n.t('index')];
    const columnWidths = [120, 120, 120, 120, 120, 100];
    let currentX = 70;
    
    this.ctx.fillStyle = '#495057';
    this.ctx.font = 'bold 12px Arial';
    headers.forEach((header, index) => {
      this.ctx.fillText(header, currentX, 840);
      currentX += columnWidths[index];
    });
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    this.ctx.strokeStyle = '#dee2e6';
    this.ctx.lineWidth = 1;
    this.ctx.beginPath();
    this.ctx.moveTo(70, 850);
    this.ctx.lineTo(1150, 850);
    this.ctx.stroke();
    
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏–∑ —Ç–æ–ø-10 –ø–∞—Ä —Å –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏
    const topPairs = data.topPairs.slice(0, 10);
    const assetIndexMap = new Map<string, string>(); // symbol -> index
    
    topPairs.forEach(pair => {
      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ —É–∂–µ –µ—Å—Ç—å –≤ –∫–∞—Ä—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
      if (assetIndexMap.has(pair.asset1)) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç –∏–Ω–¥–µ–∫—Å, –≥–¥–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤—ã—à–µ
        const existingPair = topPairs.find(p => p.asset1 === pair.asset1 || p.asset2 === pair.asset1);
        if (existingPair && pair.correlation > existingPair.correlation) {
          assetIndexMap.set(pair.asset1, pair.index);
        }
      } else {
        assetIndexMap.set(pair.asset1, pair.index);
      }
      
      if (assetIndexMap.has(pair.asset2)) {
        const existingPair = topPairs.find(p => p.asset1 === pair.asset2 || p.asset2 === pair.asset2);
        if (existingPair && pair.correlation > existingPair.correlation) {
          assetIndexMap.set(pair.asset2, pair.index);
        }
      } else {
        assetIndexMap.set(pair.asset2, pair.index);
      }
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∞—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, —á—Ç–æ –≤ —Ç–æ–ø-10 –ø–∞—Ä–∞—Ö
    // –∏ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º –∏–Ω–¥–µ–∫—Å–µ, –≥–¥–µ –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –≤ —Ç–æ–ø
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É
    const uniqueAssets = new Map<string, any>();
    data.assetsInfo
      .filter(asset => {
        const expectedIndex = assetIndexMap.get(asset.symbol);
        return expectedIndex && asset.index === expectedIndex;
      })
      .forEach(asset => {
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ —É–∂–µ –µ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if (uniqueAssets.has(asset.symbol)) {
          const existing = uniqueAssets.get(asset.symbol);
          if (asset.volatility > existing.volatility) {
            uniqueAssets.set(asset.symbol, asset);
          }
        } else {
          uniqueAssets.set(asset.symbol, asset);
        }
      });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const relevantAssets = Array.from(uniqueAssets.values())
      .sort((a, b) => b.volatility - a.volatility);
    
    // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    relevantAssets.forEach((asset, index) => {
      const rowY = 870 + index * 25;
      currentX = 70;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
      let indexColor = '#495057';
      let indexText = asset.index;
      
      if (asset.index === 'IMOEX') {
        indexColor = '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
        indexText = 'üá∑üá∫ IMOEX';
      } else if (asset.index === 'RUCBITR') {
        indexColor = '#9b59b6'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
        indexText = 'üè¢ RUCBITR';
      } else if (asset.index === 'RGBI') {
        indexColor = '#f39c12'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π
        indexText = 'üìà RGBI';
      } else if (asset.index === 'S&P500') {
        indexColor = '#3498db'; // –°–∏–Ω–∏–π –¥–ª—è S&P500
      } else if (asset.index === 'NASDAQ') {
        indexColor = '#2ecc71'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è NASDAQ
      }
      
      // –°–∏–º–≤–æ–ª
      this.ctx.fillStyle = '#007bff';
      this.ctx.font = 'bold 12px Arial';
      this.ctx.fillText(asset.symbol, currentX, rowY);
      currentX += columnWidths[0];
      
      // –¶–µ–Ω–∞
      this.ctx.fillStyle = '#28a745';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(asset.currentPrice.toFixed(2), currentX, rowY);
      currentX += columnWidths[1];
      
      // –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
      this.ctx.fillStyle = '#dc3545';
      this.ctx.font = 'bold 12px Arial';
      this.ctx.fillText(asset.volatility.toFixed(2), currentX, rowY);
      currentX += columnWidths[2];
      
      // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
      this.ctx.fillStyle = asset.avgReturn >= 0 ? '#28a745' : '#dc3545';
      this.ctx.font = '12px Arial';
      this.ctx.fillText((asset.avgReturn * 100).toFixed(2), currentX, rowY);
      currentX += columnWidths[3];
      
      // –î–∏–≤–∏–¥–µ–Ω–¥—ã/–ö—É–ø–æ–Ω—ã
      let dividendCouponText = '';
      if (asset.dividendYield) {
        dividendCouponText = `–î: ${asset.dividendYield}%`;
        this.ctx.fillStyle = '#28a745';
      } else if (asset.couponRate) {
        dividendCouponText = `–ö: ${asset.couponRate}%`;
        this.ctx.fillStyle = '#ffc107';
      } else {
        dividendCouponText = '-';
        this.ctx.fillStyle = '#6c757d';
      }
      this.ctx.font = '11px Arial';
      this.ctx.fillText(dividendCouponText, currentX, rowY);
      currentX += columnWidths[4];
      
      // –ò–Ω–¥–µ–∫—Å
      this.ctx.fillStyle = indexColor;
      this.ctx.font = '12px Arial';
      this.ctx.fillText(indexText, currentX, rowY);
    });
  }

  private drawFooter(): void {
    this.ctx.fillStyle = '#6c757d';
    this.ctx.font = '12px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText(`${this.i18n.t('generated_on')}: ${this.i18n.formatDate(new Date())}`, this.width / 2, this.height - 20);
  }

  private drawBox(x: number, y: number, width: number, height: number, fillColor: string, strokeColor: string): void {
    this.ctx.fillStyle = fillColor;
    this.ctx.fillRect(x, y, width, height);
    this.ctx.strokeStyle = strokeColor;
    this.ctx.lineWidth = 2;
    this.ctx.strokeRect(x, y, width, height);
  }

  public async generateInfographic(): Promise<void> {
    try {
      logger.info('üé® –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataPath = path.join('stats', 'pairs_analysis.json');
      if (!fs.existsSync(dataPath)) {
        throw new Error(this.i18n.t('error_loading_data'));
      }
      
      const data: PairsAnalysis = await fs.readJson(dataPath);
      logger.info('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      this.ctx.clearRect(0, 0, this.width, this.height);
      this.ctx.fillStyle = '#ffffff';
      this.ctx.fillRect(0, 0, this.width, this.height);
      
      // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      this.drawHeader();
      this.drawSummaryStats(data);
      this.drawTopPairsTable(data);
      this.drawCorrelationChart(data);
      this.drawAssetsInfo(data); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      this.drawFooter();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const today = new Date();
      const fileName = `pairs-${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}.png`;
      const filePath = path.join(this.infographicsDir, fileName);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const buffer = this.canvas.toBuffer('image/png');
      await fs.writeFile(filePath, buffer);
      
      logger.info(`‚úÖ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filePath}`);
      
    } catch (error) {
      logger.error(`‚ùå ${this.i18n.t('error_generating_infographic')}:`, error instanceof Error ? error.message : 'Unknown error');
      throw error;
    }
  }

  public async generateIndexInfographic(analysis: IndexAnalysis): Promise<void> {
    try {
      logger.info(`üé® –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è ${analysis.indexName}...`);
      
      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      this.ctx.clearRect(0, 0, this.width, this.height);
      this.ctx.fillStyle = '#ffffff';
      this.ctx.fillRect(0, 0, this.width, this.height);
      
      // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
      this.drawIndexHeader(analysis);
      this.drawIndexStats(analysis);
      this.drawIndexPairsTable(analysis);
      this.drawIndexAssetsInfo(analysis);
      this.drawFooter();
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
      const indexNameLower = analysis.indexName.toLowerCase().replace(/[^a-z0-9]/g, '');
      const indexInfographicsDir = path.join(this.infographicsDir, indexNameLower);
      await fs.ensureDir(indexInfographicsDir);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const today = new Date();
      const fileName = `pairs-${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}.png`;
      const filePath = path.join(indexInfographicsDir, fileName);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const buffer = this.canvas.toBuffer('image/png');
      await fs.writeFile(filePath, buffer);
      
      logger.info(`‚úÖ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ ${analysis.indexName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filePath}`);
      
    } catch (error) {
      logger.error(`‚ùå ${this.i18n.t('error_generating_infographic')} –¥–ª—è ${analysis.indexName}:`, error instanceof Error ? error.message : 'Unknown error');
      throw error;
    }
  }

  private drawIndexHeader(analysis: IndexAnalysis): void {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 24px Arial';
    this.ctx.fillText(`${this.i18n.t('index_analysis')}: ${analysis.indexName}`, 70, 50);
    
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.ctx.fillStyle = '#7f8c8d';
    this.ctx.font = '14px Arial';
    this.ctx.fillText(`${this.i18n.t('analysis_date')}: ${this.i18n.formatDate(new Date(analysis.analysisDate))}`, 70, 75);
  }

  private drawIndexStats(analysis: IndexAnalysis): void {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.fillText(this.i18n.t('total_pairs'), 70, 120);
    
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = '14px Arial';
    this.ctx.fillText(`${this.i18n.t('total_pairs')}: ${analysis.totalPairs.toLocaleString()}`, 70, 150);
    this.ctx.fillText(`${this.i18n.t('correlation_threshold')}: ${this.i18n.formatPercentage(analysis.correlationThreshold * 100)}`, 70, 170);
    this.ctx.fillText(`${this.i18n.t('average_correlation')}: ${this.i18n.formatPercentage(analysis.averageCorrelation * 100)}`, 70, 190);
    this.ctx.fillText(`${this.i18n.t('max_correlation')}: ${this.i18n.formatPercentage(analysis.maxCorrelation * 100)}`, 70, 210);
    this.ctx.fillText(`${this.i18n.t('top_pairs')}: ${analysis.topPairs.length}`, 70, 230);
  }

  private drawIndexPairsTable(analysis: IndexAnalysis): void {
    // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø-–ø–∞—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.fillText(this.i18n.t('top_pairs'), 70, 280);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 12px Arial';
    this.ctx.fillText(this.i18n.t('asset_pair'), 70, 310);
    this.ctx.fillText(this.i18n.t('correlation'), 250, 310);
    this.ctx.fillText(this.i18n.t('strategy'), 350, 310);
    this.ctx.fillText(this.i18n.t('volatility'), 500, 310);
    
    // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    analysis.topPairs.slice(0, 8).forEach((pair, index) => {
      const rowY = 340 + index * 25;
      
      this.ctx.fillStyle = '#34495e';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(`${pair.asset1} ‚Üî ${pair.asset2}`, 70, rowY);
      this.ctx.fillText(`${(pair.correlation * 100).toFixed(2)}%`, 250, rowY);
      this.ctx.fillText(pair.strategy, 350, rowY);
      this.ctx.fillText(`${pair.volatility1.toFixed(2)}% / ${pair.volatility2.toFixed(2)}%`, 500, rowY);
    });
  }

  private drawIndexAssetsInfo(analysis: IndexAnalysis): void {
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.fillText(this.i18n.t('assets_info'), 70, 600);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 12px Arial';
    this.ctx.fillText(this.i18n.t('symbol'), 70, 630);
    this.ctx.fillText(this.i18n.t('price'), 150, 630);
    this.ctx.fillText(this.i18n.t('volatility'), 250, 630);
    this.ctx.fillText(this.i18n.t('avg_return'), 350, 630);
    this.ctx.fillText('–î–∏–≤/–ö—É–ø–æ–Ω', 450, 630);
    
    // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    analysis.assetsInfo.slice(0, 10).forEach((asset, index) => {
      const rowY = 660 + index * 25;
      
      this.ctx.fillStyle = '#34495e';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(asset.symbol, 70, rowY);
      this.ctx.fillText(`$${asset.currentPrice.toFixed(2)}`, 150, rowY);
      this.ctx.fillText(`${asset.volatility.toFixed(2)}%`, 250, rowY);
      this.ctx.fillText(`${(asset.avgReturn * 100).toFixed(2)}%`, 350, rowY);
      
      // –î–∏–≤–∏–¥–µ–Ω–¥—ã/–ö—É–ø–æ–Ω—ã
      let dividendCouponText = '';
      if (asset.dividendYield) {
        dividendCouponText = `–î: ${asset.dividendYield}%`;
        this.ctx.fillStyle = '#28a745';
      } else if (asset.couponRate) {
        dividendCouponText = `–ö: ${asset.couponRate}%`;
        this.ctx.fillStyle = '#ffc107';
      } else {
        dividendCouponText = '-';
        this.ctx.fillStyle = '#6c757d';
      }
      this.ctx.font = '11px Arial';
      this.ctx.fillText(dividendCouponText, 450, rowY);
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { InfographicGenerator };

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
  try {
    const generator = new InfographicGenerator();
    await generator.generateInfographic();
    logger.info('üéâ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : 'Unknown error');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
} 