import * as fs from 'fs-extra';
import * as path from 'path';
import { createCanvas, Canvas, CanvasRenderingContext2D } from 'canvas';
import logger from './logger';

interface PairsAnalysis {
  totalPairs: number;
  sp500Pairs: number;
  nasdaqPairs: number;
  averageCorrelation: number;
  maxCorrelation: number;
  minCorrelation: number;
  topPairs: Array<{
    asset1: string;
    asset2: string;
    correlation: number;
    strategy: string;
    index: string;
  }>;
}

class InfographicGenerator {
  private canvas!: Canvas;
  private ctx!: CanvasRenderingContext2D;
  private infographicsDir: string;
  private width: number = 1200;
  private height: number = 800;

  constructor() {
    this.infographicsDir = 'infographics';
    this.ensureInfographicsDir();
    this.initializeCanvas();
  }

  private ensureInfographicsDir(): void {
    if (!fs.existsSync(this.infographicsDir)) {
      fs.mkdirSync(this.infographicsDir, { recursive: true });
      logger.info(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${this.infographicsDir}`);
    }
  }

  private initializeCanvas(): void {
    this.canvas = createCanvas(this.width, this.height);
    this.ctx = this.canvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
    this.ctx.fillStyle = '#ffffff';
    this.ctx.fillRect(0, 0, this.width, this.height);
  }

  private drawHeader(): void {
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 32px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('Pairs Trading Analysis', this.width / 2, 40);
    
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.ctx.fillStyle = '#7f8c8d';
    this.ctx.font = '16px Arial';
    this.ctx.fillText('–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∞–∫—Ü–∏–π', this.width / 2, 65);
  }

  private drawSummaryStats(data: PairsAnalysis): void {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.drawBox(50, 100, 300, 120, '#ecf0f1', '#bdc3c7');
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.fillText('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 70, 125);
    
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = '14px Arial';
    this.ctx.fillText(`–í—Å–µ–≥–æ –ø–∞—Ä: ${data.totalPairs.toLocaleString()}`, 70, 150);
    this.ctx.fillText(`S&P 500: ${data.sp500Pairs.toLocaleString()}`, 70, 170);
    this.ctx.fillText(`NASDAQ: ${data.nasdaqPairs.toLocaleString()}`, 70, 190);
    
    // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    this.drawBox(400, 100, 300, 120, '#e8f5e8', '#a8d5a8');
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.fillText('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è', 420, 125);
    
    this.ctx.fillStyle = '#34495e';
    this.ctx.font = '14px Arial';
    this.ctx.fillText(`–°—Ä–µ–¥–Ω—è—è: ${(data.averageCorrelation * 100).toFixed(2)}%`, 420, 150);
    this.ctx.fillText(`–ú–∞–∫—Å–∏–º—É–º: ${(data.maxCorrelation * 100).toFixed(2)}%`, 420, 170);
    this.ctx.fillText(`–ú–∏–Ω–∏–º—É–º: ${(data.minCorrelation * 100).toFixed(2)}%`, 420, 190);
  }

  private drawTopPairsTable(data: PairsAnalysis): void {
    this.drawBox(50, 250, 1100, 300, '#f8f9fa', '#dee2e6');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 18px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.fillText('–¢–æ–ø-10 –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏', 70, 280);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    const headers = ['–†–∞–Ω–≥', '–ê–∫—Ç–∏–≤ 1', '–ê–∫—Ç–∏–≤ 2', '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ò–Ω–¥–µ–∫—Å'];
    const columnWidths = [80, 150, 150, 120, 300, 100];
    let currentX = 70;
    
    this.ctx.fillStyle = '#495057';
    this.ctx.font = 'bold 12px Arial';
    headers.forEach((header, index) => {
      this.ctx.fillText(header, currentX, 310);
      currentX += columnWidths[index];
    });
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    this.ctx.strokeStyle = '#dee2e6';
    this.ctx.lineWidth = 1;
    this.ctx.beginPath();
    this.ctx.moveTo(70, 320);
    this.ctx.lineTo(1150, 320);
    this.ctx.stroke();
    
    // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const topPairs = data.topPairs.slice(0, 10);
    topPairs.forEach((pair, index) => {
      const rowY = 340 + index * 25;
      currentX = 70;
      
      // –†–∞–Ω–≥
      this.ctx.fillStyle = '#6c757d';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(`${index + 1}`, currentX, rowY);
      currentX += columnWidths[0];
      
      // –ê–∫—Ç–∏–≤ 1
      this.ctx.fillStyle = '#007bff';
      this.ctx.font = 'bold 12px Arial';
      this.ctx.fillText(pair.asset1, currentX, rowY);
      currentX += columnWidths[1];
      
      // –ê–∫—Ç–∏–≤ 2
      this.ctx.fillStyle = '#dc3545';
      this.ctx.font = 'bold 12px Arial';
      this.ctx.fillText(pair.asset2, currentX, rowY);
      currentX += columnWidths[2];
      
      // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
      this.ctx.fillStyle = '#28a745';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(`${(pair.correlation * 100).toFixed(2)}%`, currentX, rowY);
      currentX += columnWidths[3];
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è
      this.ctx.fillStyle = '#6c757d';
      this.ctx.font = '11px Arial';
      this.ctx.fillText(pair.strategy, currentX, rowY);
      currentX += columnWidths[4];
      
      // –ò–Ω–¥–µ–∫—Å
      this.ctx.fillStyle = '#6c757d';
      this.ctx.font = '12px Arial';
      this.ctx.fillText(pair.index, currentX, rowY);
    });
  }

  private drawCorrelationChart(data: PairsAnalysis): void {
    this.drawBox(50, 580, 1100, 180, '#ffffff', '#dee2e6');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    this.ctx.fillStyle = '#2c3e50';
    this.ctx.font = 'bold 16px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–¢–æ–ø-8 –ø–∞—Ä)', this.width / 2, 610);
    
    // –°–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    const topPairs = data.topPairs.slice(0, 8);
    const barWidth = 100;
    const barSpacing = 30;
    const maxHeight = 100;
    const startX = 100;
    const startY = 680;
    
    topPairs.forEach((pair, index) => {
      const barHeight = (pair.correlation / data.maxCorrelation) * maxHeight;
      const x = startX + index * (barWidth + barSpacing);
      const y = startY - barHeight;
      
      // –¶–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
      if (pair.correlation > 0.8) {
        this.ctx.fillStyle = '#28a745';
      } else if (pair.correlation > 0.6) {
        this.ctx.fillStyle = '#ffc107';
      } else {
        this.ctx.fillStyle = '#dc3545';
      }
      
      this.ctx.fillRect(x, y, barWidth, barHeight);
      this.ctx.strokeStyle = '#6c757d';
      this.ctx.lineWidth = 1;
      this.ctx.strokeRect(x, y, barWidth, barHeight);
      
      // –ü–æ–¥–ø–∏—Å–∏
      this.ctx.fillStyle = '#495057';
      this.ctx.font = '10px Arial';
      this.ctx.textAlign = 'center';
      this.ctx.fillText(`${pair.asset1}-${pair.asset2}`, x + barWidth / 2, startY + 15);
      this.ctx.fillText(`${(pair.correlation * 100).toFixed(1)}%`, x + barWidth / 2, startY + 30);
    });
  }

  private drawFooter(): void {
    this.ctx.fillStyle = '#6c757d';
    this.ctx.font = '12px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleDateString('ru-RU')}`, this.width / 2, this.height - 20);
  }

  private drawBox(x: number, y: number, width: number, height: number, fillColor: string, strokeColor: string): void {
    this.ctx.fillStyle = fillColor;
    this.ctx.fillRect(x, y, width, height);
    this.ctx.strokeStyle = strokeColor;
    this.ctx.lineWidth = 2;
    this.ctx.strokeRect(x, y, width, height);
  }

  public async generateInfographic(): Promise<void> {
    try {
      logger.info('üé® –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataPath = path.join('stats', 'pairs_analysis.json');
      if (!fs.existsSync(dataPath)) {
        throw new Error('–§–∞–π–ª pairs_analysis.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const data: PairsAnalysis = await fs.readJson(dataPath);
      logger.info('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      this.ctx.clearRect(0, 0, this.width, this.height);
      this.ctx.fillStyle = '#ffffff';
      this.ctx.fillRect(0, 0, this.width, this.height);
      
      // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      this.drawHeader();
      this.drawSummaryStats(data);
      this.drawTopPairsTable(data);
      this.drawCorrelationChart(data);
      this.drawFooter();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const today = new Date();
      const fileName = `pairs-${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}.png`;
      const filePath = path.join(this.infographicsDir, fileName);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const buffer = this.canvas.toBuffer('image/png');
      await fs.writeFile(filePath, buffer);
      
      logger.info(`‚úÖ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filePath}`);
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏:', error instanceof Error ? error.message : 'Unknown error');
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { InfographicGenerator };

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
  try {
    const generator = new InfographicGenerator();
    await generator.generateInfographic();
    logger.info('üéâ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : 'Unknown error');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
} 