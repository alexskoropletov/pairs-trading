import { analyzeAllIndexes } from './index_analysis';
import logger from './logger';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function getAnalysisHorizon(): number {
    const arg = process.argv.find(a => a.startsWith('--days='));
    if (arg) {
        const days = parseInt(arg.split('=')[1], 10);
        if (!isNaN(days) && days > 0) return days;
    }
    return 63; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–µ—Å—è—Ü–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 63 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)
}

async function main(): Promise<void> {
    logger.info('üéØ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞
        const horizonDays = getAnalysisHorizon();
        logger.info(`üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞: ${horizonDays} –¥–Ω–µ–π`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        await analyzeAllIndexes(horizonDays);
        
        logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        logger.info('\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:');
        logger.info('   - stats/index_reports/ (–æ—Ç—á–µ—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º)');
        logger.info('   - infographics/ (–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º)');
        logger.info('   - stats/index_reports/summary.json (—Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç)');
        
    } catch (error) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(error => {
        logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
} 