import * as fs from 'fs-extra';
import path from 'path';
import logger from './logger';

const TICKERS_DIR = 'tickers';

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
 * @returns Promise<void>
 */
export async function ensureTickerDirectories(): Promise<void> {
    try {
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É —Ç–∏–∫–µ—Ä–æ–≤
        await fs.ensureDir(TICKERS_DIR);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        const subDirectories = ['sp500', 'nasdaq', 'imoex', 'rucbitr', 'rgbi'];
        
        for (const subDir of subDirectories) {
            const fullPath = path.join(TICKERS_DIR, subDir);
            await fs.ensureDir(fullPath);
        }
        
        logger.info('üìÅ –ü–∞–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–æ–∫ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤:', error instanceof Error ? error.message : 'Unknown error');
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
 * @param indexName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
 * @returns Promise<boolean>
 */
export async function checkIndexDirectory(indexName: string): Promise<boolean> {
    try {
        const indexPath = path.join(TICKERS_DIR, indexName.toLowerCase());
        return await fs.pathExists(indexPath);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏ ${indexName}:`, error instanceof Error ? error.message : 'Unknown error');
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏–Ω–¥–µ–∫—Å–∞
 * @param indexName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
 * @returns Promise<string[]>
 */
export async function getIndexFiles(indexName: string): Promise<string[]> {
    try {
        const indexPath = path.join(TICKERS_DIR, indexName.toLowerCase());
        
        if (!await fs.pathExists(indexPath)) {
            return [];
        }
        
        const files = await fs.readdir(indexPath);
        return files.filter(file => file.endsWith('.csv'));
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ${indexName}:`, error instanceof Error ? error.message : 'Unknown error');
        return [];
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
 * @param indexName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
 * @returns Promise<void>
 */
export async function ensureIndexDirectory(indexName: string): Promise<void> {
    try {
        const indexPath = path.join(TICKERS_DIR, indexName.toLowerCase());
        await fs.ensureDir(indexPath);
        logger.info(`üìÅ –ü–∞–ø–∫–∞ –¥–ª—è ${indexName} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞`);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–ª—è ${indexName}:`, error instanceof Error ? error.message : 'Unknown error');
        throw error;
    }
} 