import dotenv from 'dotenv';
dotenv.config();
import * as fs from 'fs-extra';
import path from 'path';
import { StockData, CSVRow, csvRowToStockData, CorrelationPair, PairsTradingAnalysis } from './types';
import { stockSymbols } from './stock';
import logger from './logger';

const STATS_DIR = 'stats';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function getAnalysisHorizon(): number {
    const arg = process.argv.find(a => a.startsWith('--days='));
    if (arg) {
        const days = parseInt(arg.split('=')[1], 10);
        if (!isNaN(days) && days > 0) return days;
    }
    return 63; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–µ—Å—è—Ü–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 63 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
async function readCSV(symbol: string): Promise<StockData[]> {
    const csvPath = path.join(STATS_DIR, `${symbol}.csv`);
    const csvContent = await fs.readFile(csvPath, 'utf-8');
    const lines = csvContent.split('\n');
    const headers = lines[0].split(',');
    const data: StockData[] = [];
    
    for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim()) {
            const values = lines[i].split(',');
            const row: CSVRow = {};
            headers.forEach((header: string, index: number) => {
                row[header.trim()] = values[index] ? parseFloat(values[index]) : 0;
            });
            data.push(csvRowToStockData(row));
        }
    }
    
    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
function calculateReturns(prices: number[]): number[] {
    const returns: number[] = [];
    for (let i = 1; i < prices.length; i++) {
        returns.push((prices[i] - prices[i-1]) / prices[i-1] * 100);
    }
    return returns;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞—Å—Å–∏–≤–∞–º–∏
function calculateCorrelation(returns1: number[], returns2: number[]): number {
    const n = Math.min(returns1.length, returns2.length);
    
    const mean1 = returns1.slice(0, n).reduce((sum, val) => sum + val, 0) / n;
    const mean2 = returns2.slice(0, n).reduce((sum, val) => sum + val, 0) / n;
    
    let numerator = 0;
    let denominator1 = 0;
    let denominator2 = 0;
    
    for (let i = 0; i < n; i++) {
        const diff1 = returns1[i] - mean1;
        const diff2 = returns2[i] - mean2;
        
        numerator += diff1 * diff2;
        denominator1 += diff1 * diff1;
        denominator2 += diff2 * diff2;
    }
    
    if (denominator1 === 0 || denominator2 === 0) return 0;
    
    return numerator / Math.sqrt(denominator1 * denominator2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
function calculateVolatility(returns: number[]): number {
    const mean = returns.reduce((sum, val) => sum + val, 0) / returns.length;
    const variance = returns.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / returns.length;
    return Math.sqrt(variance);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ—Ö–æ–¥–∞
function calculateAverageReturn(returns: number[]): number {
    return returns.reduce((sum, val) => sum + val, 0) / returns.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞
function assessProspectivity(returns: number[], volatility: number): number {
    const avgReturn = calculateAverageReturn(returns);
    const sharpeRatio = avgReturn / volatility; // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
    return sharpeRatio;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø–∞—Ä –∞–∫—Ç–∏–≤–æ–≤
async function analyzePairs(horizonDays: number): Promise<CorrelationPair[]> {
    logger.info(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –∞–∫—Ç–∏–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${horizonDays} –¥–Ω–µ–π...`);
    
    const pairs: CorrelationPair[] = [];
    const symbols = stockSymbols;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
    const assetData: { [symbol: string]: StockData[] } = {};
    
    for (const symbol of symbols) {
        try {
            assetData[symbol] = await readCSV(symbol);
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ horizonDays –∑–∞–ø–∏—Å–µ–π
            if (assetData[symbol].length > horizonDays) {
                assetData[symbol] = assetData[symbol].slice(-horizonDays);
            }
            logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}`);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}: ${error}`);
            continue;
        }
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã
    for (let i = 0; i < symbols.length; i++) {
        for (let j = i + 1; j < symbols.length; j++) {
            const symbol1 = symbols[i];
            const symbol2 = symbols[j];
            
            if (!assetData[symbol1] || !assetData[symbol2]) continue;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const prices1 = assetData[symbol1].map(d => d.Close);
            const prices2 = assetData[symbol2].map(d => d.Close);
            
            const returns1 = calculateReturns(prices1);
            const returns2 = calculateReturns(prices2);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            const correlation = calculateCorrelation(returns1, returns2);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            const volatility1 = calculateVolatility(returns1);
            const volatility2 = calculateVolatility(returns2);

            if (
                !correlation
                || !volatility1
                || !volatility2
            ) {
                continue;
            }

            // console.log('[>>>>]', symbol1, symbol2, correlation, volatility1, volatility2);
            
            // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            const prospectivity1 = assessProspectivity(returns1, volatility1);
            const prospectivity2 = assessProspectivity(returns2, volatility2);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ–Ω
            const longAsset = prospectivity1 > prospectivity2 ? symbol1 : symbol2;
            const shortAsset = prospectivity1 > prospectivity2 ? symbol2 : symbol1;
            const longProspectivity = Math.max(prospectivity1, prospectivity2);
            const shortProspectivity = Math.min(prospectivity1, prospectivity2);
            
            pairs.push({
                asset1: symbol1,
                asset2: symbol2,
                correlation: Math.abs(correlation), // –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                longAsset,
                shortAsset,
                longProspectivity,
                shortProspectivity,
                volatility1,
                volatility2,
                avgReturn1: calculateAverageReturn(returns1),
                avgReturn2: calculateAverageReturn(returns2),
                strategy: `LONG ${longAsset} / SHORT ${shortAsset}`
            });
        }
    }
    
    return pairs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function saveResults(topPairs: CorrelationPair[], analysis: PairsTradingAnalysis): Promise<void> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã
    const pairsData = topPairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));
    
    await fs.writeJson('stats/pairs_trading.csv', pairsData, { spaces: 2 });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    await fs.writeJson('stats/pairs_analysis.json', analysis, { spaces: 2 });
    
    logger.info('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading.csv –∏ stats/pairs_analysis.json');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(topPairs: CorrelationPair[], analysis: PairsTradingAnalysis): void {
    logger.info('\nüéØ –¢–û–ü-3 –ü–ê–†–´ –î–õ–Ø –ü–ê–†–ù–û–ì–û –¢–†–ï–ô–î–ò–ù–ì–ê:');
    logger.info('=' .repeat(80));
    
    topPairs.forEach((pair, index) => {
        logger.info(`\n${index + 1}. ${pair.asset1} ‚Üî ${pair.asset2}`);
        logger.info(`   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(pair.correlation * 100).toFixed(2)}%`);
        logger.info(`   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${pair.strategy}`);
        logger.info(`   –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å LONG: ${pair.longProspectivity.toFixed(4)}`);
        logger.info(`   –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å SHORT: ${pair.shortProspectivity.toFixed(4)}`);
        logger.info(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ${pair.asset1}: ${pair.volatility1.toFixed(2)}%`);
        logger.info(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ${pair.asset2}: ${pair.volatility2.toFixed(2)}%`);
        logger.info(`   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${pair.asset1}: ${pair.avgReturn1.toFixed(4)}%`);
        logger.info(`   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${pair.asset2}: ${pair.avgReturn2.toFixed(4)}%`);
    });
    
    logger.info('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:');
    logger.info('=' .repeat(50));
    logger.info(`–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: ${analysis.totalPairs}`);
    logger.info(`–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.averageCorrelation * 100).toFixed(2)}%`);
    logger.info(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.maxCorrelation * 100).toFixed(2)}%`);
    logger.info(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.minCorrelation * 100).toFixed(2)}%`);
    
    logger.info('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    logger.info('=' .repeat(50));
    logger.info('‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (>0.7) - —Ö–æ—Ä–æ—à–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞');
    logger.info('‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–±—ã–ª–∏');
    logger.info('‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏');
    logger.info('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
    logger.info('üéØ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É stats –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await fs.ensureDir(STATS_DIR);
        
        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞
        const horizonDays = getAnalysisHorizon();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
        const allPairs = await analyzePairs(horizonDays);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        const sortedPairs = allPairs.sort((a, b) => b.correlation - a.correlation);
        
        // –ë–µ—Ä–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã
        const topPairs = sortedPairs.slice(0, process.env.TOP_PAIRS_COUNT ? parseInt(process.env.TOP_PAIRS_COUNT) : 3);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const correlations = allPairs.map(p => p.correlation);
        const analysis: PairsTradingAnalysis = {
            totalPairs: allPairs.length,
            averageCorrelation: correlations.reduce((sum, val) => sum + val, 0) / correlations.length,
            maxCorrelation: Math.max(...correlations),
            minCorrelation: Math.min(...correlations),
            topPairs: topPairs.map(p => ({
                asset1: p.asset1,
                asset2: p.asset2,
                correlation: p.correlation,
                strategy: p.strategy
            }))
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await saveResults(topPairs, analysis);
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        displayResults(topPairs, analysis);
        
        logger.info('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ä:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
} 
