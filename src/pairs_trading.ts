import dotenv from 'dotenv';
dotenv.config();
import * as fs from 'fs-extra';
import path from 'path';
import { StockData, CSVRow, csvRowToStockData, CorrelationPair, PairsTradingAnalysis, AssetInfo } from './types';
import { stockSymbols, sp500StocksFallback, nasdaq100StocksFallback, imoexStocksFallback, rucbitrStocksFallback, rgbiStocksFallback } from './stock';
import { ensureTickerDirectories } from './utils';
import logger from './logger';
import indexesConfigManager from './indexes_config';

const STATS_DIR = 'stats';
const TICKERS_DIR = 'tickers';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ç–∏–∫–µ—Ä–∞
function getTickerIndex(symbol: string): 'sp500' | 'nasdaq' | 'imoex' | 'rucbitr' | 'rgbi' {
    const sp500Symbols = sp500StocksFallback.map(stock => stock.symbol);
    const nasdaqSymbols = nasdaq100StocksFallback.map(stock => stock.symbol);
    const imoexSymbols = imoexStocksFallback.map(stock => stock.symbol);
    const rucbitrSymbols = rucbitrStocksFallback.map(stock => stock.symbol);
    const rgbiSymbols = rgbiStocksFallback.map(stock => stock.symbol);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã, –∑–∞—Ç–µ–º –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ
    if (rgbiSymbols.includes(symbol)) {
        return 'rgbi';
    } else if (rucbitrSymbols.includes(symbol)) {
        return 'rucbitr';
    } else if (imoexSymbols.includes(symbol)) {
        return 'imoex';
    } else if (nasdaqSymbols.includes(symbol)) {
        return 'nasdaq';
    } else if (sp500Symbols.includes(symbol)) {
        return 'sp500';
    } else {
        // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º S&P500
        return 'sp500';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ CSV —Ñ–∞–π–ª—É
function getCSVPath(symbol: string): string {
    const index = getTickerIndex(symbol);
    let dir: string;
    
    switch (index) {
        case 'sp500':
            dir = path.join(TICKERS_DIR, 'sp500');
            break;
        case 'nasdaq':
            dir = path.join(TICKERS_DIR, 'nasdaq');
            break;
        case 'imoex':
            dir = path.join(TICKERS_DIR, 'imoex');
            break;
        case 'rucbitr':
            dir = path.join(TICKERS_DIR, 'rucbitr');
            break;
        case 'rgbi':
            dir = path.join(TICKERS_DIR, 'rgbi');
            break;
        default:
            dir = path.join(TICKERS_DIR, 'sp500');
    }
    
    return path.join(dir, `${symbol}.csv`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function getAnalysisHorizon(): number {
    const arg = process.argv.find(a => a.startsWith('--days='));
    if (arg) {
        const days = parseInt(arg.split('=')[1], 10);
        if (!isNaN(days) && days > 0) return days;
    }
    return 63; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–µ—Å—è—Ü–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 63 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
function separateTickersByIndex(): { sp500: string[], nasdaq: string[], imoex: string[], rucbitr: string[], rgbi: string[] } {
    const sp500Symbols = sp500StocksFallback.map(stock => stock.symbol);
    const nasdaqSymbols = nasdaq100StocksFallback.map(stock => stock.symbol);
    const imoexSymbols = imoexStocksFallback.map(stock => stock.symbol);
    const rucbitrSymbols = rucbitrStocksFallback.map(stock => stock.symbol);
    const rgbiSymbols = rgbiStocksFallback.map(stock => stock.symbol);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–∏–∫–µ—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    const availableSymbols = stockSymbols;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    const sp500 = indexesConfigManager.isIndexEnabled('sp500') 
        ? sp500Symbols.filter(symbol => availableSymbols.includes(symbol))
        : [];
    const nasdaq = indexesConfigManager.isIndexEnabled('nasdaq')
        ? nasdaqSymbols.filter(symbol => availableSymbols.includes(symbol))
        : [];
    const imoex = indexesConfigManager.isIndexEnabled('imoex')
        ? imoexSymbols.filter(symbol => availableSymbols.includes(symbol))
        : [];
    const rucbitr = indexesConfigManager.isIndexEnabled('rucbitr')
        ? rucbitrSymbols.filter(symbol => availableSymbols.includes(symbol))
        : [];
    const rgbi = indexesConfigManager.isIndexEnabled('rgbi')
        ? rgbiSymbols.filter(symbol => availableSymbols.includes(symbol))
        : [];
    
    logger.info(`üìä S&P 500 —Ç–∏–∫–µ—Ä–æ–≤: ${sp500.length}`);
    logger.info(`üìä NASDAQ —Ç–∏–∫–µ—Ä–æ–≤: ${nasdaq.length}`);
    logger.info(`üá∑üá∫ IMOEX —Ç–∏–∫–µ—Ä–æ–≤: ${imoex.length}`);
    logger.info(`üè¢ RUCBITR —Ç–∏–∫–µ—Ä–æ–≤: ${rucbitr.length}`);
    logger.info(`üìà RGBI —Ç–∏–∫–µ—Ä–æ–≤: ${rgbi.length}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    indexesConfigManager.logEnabledIndexes();
    
    return { sp500, nasdaq, imoex, rucbitr, rgbi };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
async function readCSV(symbol: string): Promise<StockData[]> {
    const csvPath = getCSVPath(symbol);
    const csvContent = await fs.readFile(csvPath, 'utf-8');
    const lines = csvContent.split('\n');
    const headers = lines[0].split(',');
    const data: StockData[] = [];
    
    for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim()) {
            const values = lines[i].split(',');
            const row: CSVRow = {};
            headers.forEach((header: string, index: number) => {
                row[header.trim()] = values[index] ? parseFloat(values[index]) : 0;
            });
            data.push(csvRowToStockData(row));
        }
    }
    
    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
function calculateReturns(prices: number[]): number[] {
    const returns: number[] = [];
    for (let i = 1; i < prices.length; i++) {
        returns.push((prices[i] - prices[i-1]) / prices[i-1] * 100);
    }
    return returns;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞—Å—Å–∏–≤–∞–º–∏
function calculateCorrelation(returns1: number[], returns2: number[]): number {
    const n = Math.min(returns1.length, returns2.length);
    
    const mean1 = returns1.slice(0, n).reduce((sum, val) => sum + val, 0) / n;
    const mean2 = returns2.slice(0, n).reduce((sum, val) => sum + val, 0) / n;
    
    let numerator = 0;
    let denominator1 = 0;
    let denominator2 = 0;
    
    for (let i = 0; i < n; i++) {
        const diff1 = returns1[i] - mean1;
        const diff2 = returns2[i] - mean2;
        
        numerator += diff1 * diff2;
        denominator1 += diff1 * diff1;
        denominator2 += diff2 * diff2;
    }
    
    if (denominator1 === 0 || denominator2 === 0) return 0;
    
    return numerator / Math.sqrt(denominator1 * denominator2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
function calculateVolatility(returns: number[]): number {
    const mean = returns.reduce((sum, val) => sum + val, 0) / returns.length;
    const variance = returns.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / returns.length;
    return Math.sqrt(variance);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ—Ö–æ–¥–∞
function calculateAverageReturn(returns: number[]): number {
    return returns.reduce((sum, val) => sum + val, 0) / returns.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞
function assessProspectivity(returns: number[], volatility: number): number {
    const avgReturn = calculateAverageReturn(returns);
    const sharpeRatio = avgReturn / volatility; // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
    return sharpeRatio;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä –∞–∫—Ç–∏–≤–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
export async function analyzePairsInIndex(symbols: string[], indexName: string, horizonDays: number): Promise<CorrelationPair[]> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    const indexKey = indexName.toLowerCase().replace(/[^a-z0-9]/g, '');
    const correlationThreshold = indexesConfigManager.getIndexCorrelationThreshold(indexKey);
    
    logger.info(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –≤ ${indexName} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${horizonDays} –¥–Ω–µ–π (–ø–æ—Ä–æ–≥: ${correlationThreshold * 100}%)...`);
    
    const pairs: CorrelationPair[] = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
    const assetData: { [symbol: string]: StockData[] } = {};
    
    for (const symbol of symbols) {
        try {
            assetData[symbol] = await readCSV(symbol);
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ horizonDays –∑–∞–ø–∏—Å–µ–π
            if (assetData[symbol].length > horizonDays) {
                assetData[symbol] = assetData[symbol].slice(-horizonDays);
            }
            logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol} (${indexName})`);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol} (${indexName}): ${error}`);
            continue;
        }
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –≤ —Ä–∞–º–∫–∞—Ö –∏–Ω–¥–µ–∫—Å–∞
    for (let i = 0; i < symbols.length; i++) {
        for (let j = i + 1; j < symbols.length; j++) {
            const symbol1 = symbols[i];
            const symbol2 = symbols[j];
            
            if (!assetData[symbol1] || !assetData[symbol2]) continue;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const prices1 = assetData[symbol1].map(d => d.Close);
            const prices2 = assetData[symbol2].map(d => d.Close);
            
            const returns1 = calculateReturns(prices1);
            const returns2 = calculateReturns(prices2);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            const correlation = calculateCorrelation(returns1, returns2);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            const volatility1 = calculateVolatility(returns1);
            const volatility2 = calculateVolatility(returns2);

            if (
                !correlation
                || !volatility1
                || !volatility2
                || correlation >= 1 // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–Ω—å—à–µ 1
                || symbol1 === symbol2 // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ asset1 –Ω–µ —Ä–∞–≤–µ–Ω asset2
            ) {
                continue;
            }
            
            // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            const prospectivity1 = assessProspectivity(returns1, volatility1);
            const prospectivity2 = assessProspectivity(returns2, volatility2);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ–Ω
            const longAsset = prospectivity1 > prospectivity2 ? symbol1 : symbol2;
            const shortAsset = prospectivity1 > prospectivity2 ? symbol2 : symbol1;
            const longProspectivity = Math.max(prospectivity1, prospectivity2);
            const shortProspectivity = Math.min(prospectivity1, prospectivity2);
            
            pairs.push({
                asset1: symbol1,
                asset2: symbol2,
                correlation: Math.abs(correlation), // –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                longAsset,
                shortAsset,
                longProspectivity,
                shortProspectivity,
                volatility1,
                volatility2,
                avgReturn1: calculateAverageReturn(returns1),
                avgReturn2: calculateAverageReturn(returns2),
                strategy: `LONG ${longAsset} / SHORT ${shortAsset}`,
                index: indexName
            });
        }
    }
    
    logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ ${pairs.length} –ø–∞—Ä –≤ ${indexName}`);
    return pairs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø–∞—Ä –∞–∫—Ç–∏–≤–æ–≤
async function analyzePairs(horizonDays: number): Promise<CorrelationPair[]> {
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    const { sp500, nasdaq, imoex, rucbitr, rgbi } = separateTickersByIndex();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    const sp500Pairs = await analyzePairsInIndex(sp500, 'S&P500', horizonDays);
    const nasdaqPairs = await analyzePairsInIndex(nasdaq, 'NASDAQ', horizonDays);
    const imoexPairs = await analyzePairsInIndex(imoex, 'IMOEX', horizonDays);
    const rucbitrPairs = await analyzePairsInIndex(rucbitr, 'RUCBITR', horizonDays);
    const rgbiPairs = await analyzePairsInIndex(rgbi, 'RGBI', horizonDays);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allPairs = [...sp500Pairs, ...nasdaqPairs, ...imoexPairs, ...rucbitrPairs, ...rgbiPairs];
    
    logger.info(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: ${allPairs.length}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    if (indexesConfigManager.isIndexEnabled('sp500')) {
        logger.info(`üìä S&P500 –ø–∞—Ä: ${sp500Pairs.length}`);
    }
    if (indexesConfigManager.isIndexEnabled('nasdaq')) {
        logger.info(`üìä NASDAQ –ø–∞—Ä: ${nasdaqPairs.length}`);
    }
    if (indexesConfigManager.isIndexEnabled('imoex')) {
        logger.info(`üá∑üá∫ IMOEX –ø–∞—Ä: ${imoexPairs.length}`);
    }
    if (indexesConfigManager.isIndexEnabled('rucbitr')) {
        logger.info(`üè¢ RUCBITR –ø–∞—Ä: ${rucbitrPairs.length}`);
    }
    if (indexesConfigManager.isIndexEnabled('rgbi')) {
        logger.info(`üìà RGBI –ø–∞—Ä: ${rgbiPairs.length}`);
    }
    
    return allPairs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–∞—Ö
export async function collectAssetsInfo(symbols: string[], indexName: string): Promise<AssetInfo[]> {
    const assetsInfo: AssetInfo[] = [];
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –∏ –∫—É–ø–æ–Ω–∞—Ö
    const { sp500StocksFallback, nasdaq100StocksFallback, imoexStocksFallback, rucbitrStocksFallback, rgbiStocksFallback } = await import('./stock');
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–∞—Ö
    const allStocks = [
        ...sp500StocksFallback,
        ...nasdaq100StocksFallback,
        ...imoexStocksFallback,
        ...rucbitrStocksFallback,
        ...rgbiStocksFallback
    ];
    
    for (const symbol of symbols) {
        try {
            const stockData = await readCSV(symbol);
            if (stockData.length === 0) continue;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å)
            const currentPrice = stockData[stockData.length - 1].Close;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            const prices = stockData.map(d => d.Close);
            const returns = calculateReturns(prices);
            const volatility = calculateVolatility(returns);
            const avgReturn = calculateAverageReturn(returns);
            
            // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –∏ –∫—É–ø–æ–Ω–∞—Ö
            const stockInfo = allStocks.find(stock => stock.symbol === symbol);
            const dividendYield = stockInfo?.dividendYield;
            const couponRate = stockInfo?.couponRate;
            
            assetsInfo.push({
                symbol,
                currentPrice,
                volatility,
                avgReturn,
                index: indexName,
                dividendYield,
                couponRate
            });
            
            const dividendInfo = dividendYield ? `, –¥–∏–≤–∏–¥–µ–Ω–¥—ã ${dividendYield}%` : '';
            const couponInfo = couponRate ? `, –∫—É–ø–æ–Ω ${couponRate}%` : '';
            logger.info(`üìä –°–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${symbol}: —Ü–µ–Ω–∞ $${currentPrice.toFixed(2)}, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ${volatility.toFixed(2)}%${dividendInfo}${couponInfo}`);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ${symbol}: ${error}`);
        }
    }
    
    return assetsInfo;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function saveResults(topPairs: CorrelationPair[], analysis: PairsTradingAnalysis): Promise<void> {
    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    const sp500Pairs = topPairs.filter(pair => pair.index === 'S&P500');
    const nasdaqPairs = topPairs.filter(pair => pair.index === 'NASDAQ');
    const imoexPairs = topPairs.filter(pair => pair.index === 'IMOEX');
    const rucbitrPairs = topPairs.filter(pair => pair.index === 'RUCBITR');
    const rgbiPairs = topPairs.filter(pair => pair.index === 'RGBI');
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∞—Ö
    const { sp500, nasdaq, imoex, rucbitr, rgbi } = separateTickersByIndex();
    const sp500AssetsInfo = await collectAssetsInfo(sp500, 'S&P500');
    const nasdaqAssetsInfo = await collectAssetsInfo(nasdaq, 'NASDAQ');
    const imoexAssetsInfo = await collectAssetsInfo(imoex, 'IMOEX');
    const rucbitrAssetsInfo = await collectAssetsInfo(rucbitr, 'RUCBITR');
    const rgbiAssetsInfo = await collectAssetsInfo(rgbi, 'RGBI');
    const allAssetsInfo = [...sp500AssetsInfo, ...nasdaqAssetsInfo, ...imoexAssetsInfo, ...rucbitrAssetsInfo, ...rgbiAssetsInfo];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∞—Ö –≤ –∞–Ω–∞–ª–∏–∑
    analysis.assetsInfo = allAssetsInfo;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã S&P500
    const sp500Data = sp500Pairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        index: pair.index,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã NASDAQ
    const nasdaqData = nasdaqPairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        index: pair.index,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã IMOEX
    const imoexData = imoexPairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        index: pair.index,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã RUCBITR
    const rucbitrData = rucbitrPairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        index: pair.index,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã RGBI
    const rgbiData = rgbiPairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        index: pair.index,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
    const allPairsData = topPairs.map(pair => ({
        asset1: pair.asset1,
        asset2: pair.asset2,
        correlation: pair.correlation.toFixed(4),
        longAsset: pair.longAsset,
        shortAsset: pair.shortAsset,
        strategy: pair.strategy,
        index: pair.index,
        longProspectivity: pair.longProspectivity.toFixed(4),
        shortProspectivity: pair.shortProspectivity.toFixed(4),
        volatility1: pair.volatility1.toFixed(4),
        volatility2: pair.volatility2.toFixed(4),
        avgReturn1: pair.avgReturn1.toFixed(4),
        avgReturn2: pair.avgReturn2.toFixed(4)
    }));
    
    await fs.writeJson(
        'stats/pairs_trading.csv',
        allPairsData
            .filter(
                pair => Number(pair.correlation) > getCorrelation()
            ),
        { spaces: 2 }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ S&P500 –∏ NASDAQ
    if (sp500Data.length > 0) {
        await fs.writeJson('stats/pairs_trading_sp500.csv', sp500Data, { spaces: 2 });
        logger.info(`üíæ S&P500 –ø–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading_sp500.csv (${sp500Data.length} –ø–∞—Ä)`);
    }
    
    if (nasdaqData.length > 0) {
        await fs.writeJson('stats/pairs_trading_nasdaq.csv', nasdaqData, { spaces: 2 });
        logger.info(`üíæ NASDAQ –ø–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading_nasdaq.csv (${nasdaqData.length} –ø–∞—Ä)`);
    }

    if (imoexData.length > 0) {
        await fs.writeJson('stats/pairs_trading_imoex.csv', imoexData, { spaces: 2 });
        logger.info(`üíæ IMOEX –ø–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading_imoex.csv (${imoexData.length} –ø–∞—Ä)`);
    }

    if (rucbitrData.length > 0) {
        await fs.writeJson('stats/pairs_trading_rucbitr.csv', rucbitrData, { spaces: 2 });
        logger.info(`üíæ RUCBITR –ø–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading_rucbitr.csv (${rucbitrData.length} –ø–∞—Ä)`);
    }

    if (rgbiData.length > 0) {
        await fs.writeJson('stats/pairs_trading_rgbi.csv', rgbiData, { spaces: 2 });
        logger.info(`üíæ RGBI –ø–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading_rgbi.csv (${rgbiData.length} –ø–∞—Ä)`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    await fs.writeJson('stats/pairs_analysis.json', analysis, { spaces: 2 });
    
    logger.info('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stats/pairs_trading.csv –∏ stats/pairs_analysis.json');
    logger.info(`üìä –°–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${allAssetsInfo.length} –∞–∫—Ç–∏–≤–∞—Ö`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(topPairs: CorrelationPair[], analysis: PairsTradingAnalysis): void {
    logger.info('\nüéØ –¢–û–ü-3 –ü–ê–†–´ –î–õ–Ø –ü–ê–†–ù–û–ì–û –¢–†–ï–ô–î–ò–ù–ì–ê:');
    logger.info('=' .repeat(80));
    
    topPairs.forEach((pair, index) => {
        logger.info(`\n${index + 1}. ${pair.asset1} ‚Üî ${pair.asset2} [${pair.index}]`);
        logger.info(`   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(pair.correlation * 100).toFixed(2)}%`);
        logger.info(`   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${pair.strategy}`);
        logger.info(`   –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å LONG: ${pair.longProspectivity.toFixed(4)}`);
        logger.info(`   –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å SHORT: ${pair.shortProspectivity.toFixed(4)}`);
        logger.info(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ${pair.asset1}: ${pair.volatility1.toFixed(2)}%`);
        logger.info(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ${pair.asset2}: ${pair.volatility2.toFixed(2)}%`);
        logger.info(`   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${pair.asset1}: ${pair.avgReturn1.toFixed(4)}%`);
        logger.info(`   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${pair.asset2}: ${pair.avgReturn2.toFixed(4)}%`);
    });
    
    logger.info('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:');
    logger.info('=' .repeat(50));
    logger.info(`–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: ${analysis.totalPairs}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    if (indexesConfigManager.isIndexEnabled('sp500')) {
        logger.info(`S&P500 –ø–∞—Ä: ${analysis.sp500Pairs}`);
    }
    if (indexesConfigManager.isIndexEnabled('nasdaq')) {
        logger.info(`NASDAQ –ø–∞—Ä: ${analysis.nasdaqPairs}`);
    }
    if (indexesConfigManager.isIndexEnabled('imoex')) {
        logger.info(`üá∑üá∫ IMOEX –ø–∞—Ä: ${analysis.imoexPairs}`);
    }
    if (indexesConfigManager.isIndexEnabled('rucbitr')) {
        logger.info(`üè¢ RUCBITR –ø–∞—Ä: ${analysis.rucbitrPairs}`);
    }
    if (indexesConfigManager.isIndexEnabled('rgbi')) {
        logger.info(`üìà RGBI –ø–∞—Ä: ${analysis.rgbiPairs}`);
    }
    logger.info(`–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.averageCorrelation * 100).toFixed(2)}%`);
    logger.info(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.maxCorrelation * 100).toFixed(2)}%`);
    logger.info(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.minCorrelation * 100).toFixed(2)}%`);
    
    logger.info('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    logger.info('=' .repeat(50));
    logger.info('‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (>0.7) - —Ö–æ—Ä–æ—à–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞');
    logger.info('‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–±—ã–ª–∏');
    logger.info('‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏');
    logger.info('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏');
    logger.info('‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
    logger.info('üéØ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ (–ø–æ –∏–Ω–¥–µ–∫—Å–∞–º)...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await fs.ensureDir(STATS_DIR);
        await ensureTickerDirectories();
        
        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞
        const horizonDays = getAnalysisHorizon();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
        const allPairs = await analyzePairs(horizonDays);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        // const sortedPairs = allPairs.sort((a, b) => b.correlation - a.correlation);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        const sp500AllPairs = allPairs.filter(p => p.index === 'S&P500').sort((a, b) => b.correlation - a.correlation);
        const nasdaqAllPairs = allPairs.filter(p => p.index === 'NASDAQ').sort((a, b) => b.correlation - a.correlation);
        const imoexAllPairs = allPairs.filter(p => p.index === 'IMOEX').sort((a, b) => b.correlation - a.correlation);
        const rucbitrAllPairs = allPairs.filter(p => p.index === 'RUCBITR').sort((a, b) => b.correlation - a.correlation);
        const rgbiAllPairs = allPairs.filter(p => p.index === 'RGBI').sort((a, b) => b.correlation - a.correlation);
        
        // –ë–µ—Ä–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        const topSp500Pairs = sp500AllPairs.slice(0, process.env.TOP_PAIRS_COUNT ? parseInt(process.env.TOP_PAIRS_COUNT) : 3);
        const topNasdaqPairs = nasdaqAllPairs.slice(0, process.env.TOP_PAIRS_COUNT ? parseInt(process.env.TOP_PAIRS_COUNT) : 3);
        const topImoexPairs = imoexAllPairs.slice(0, process.env.TOP_PAIRS_COUNT ? parseInt(process.env.TOP_PAIRS_COUNT) : 3);
        const topRucbitrPairs = rucbitrAllPairs.slice(0, process.env.TOP_PAIRS_COUNT ? parseInt(process.env.TOP_PAIRS_COUNT) : 3);
        const topRgbiPairs = rgbiAllPairs.slice(0, process.env.TOP_PAIRS_COUNT ? parseInt(process.env.TOP_PAIRS_COUNT) : 3);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ–ø-–ø–∞—Ä—ã
        const topPairs = [...topSp500Pairs, ...topNasdaqPairs, ...topImoexPairs, ...topRucbitrPairs, ...topRgbiPairs].filter(p => Number(p.correlation) > getCorrelation());
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const correlations = allPairs.map(p => p.correlation);
        const sp500Pairs = allPairs.filter(p => p.index === 'S&P500').length;
        const nasdaqPairs = allPairs.filter(p => p.index === 'NASDAQ').length;
        const imoexPairs = allPairs.filter(p => p.index === 'IMOEX').length;
        const rucbitrPairs = allPairs.filter(p => p.index === 'RUCBITR').length;
        const rgbiPairs = allPairs.filter(p => p.index === 'RGBI').length;
        
        const analysis: PairsTradingAnalysis = {
            totalPairs: allPairs.length,
            sp500Pairs,
            nasdaqPairs,
            imoexPairs,
            rucbitrPairs,
            rgbiPairs,
            averageCorrelation: correlations.reduce((sum, val) => sum + val, 0) / correlations.length,
            maxCorrelation: Math.max(...correlations),
            minCorrelation: Math.min(...correlations),
            topPairs: topPairs.map(p => ({
                asset1: p.asset1,
                asset2: p.asset2,
                correlation: p.correlation,
                longAsset: p.longAsset,
                shortAsset: p.shortAsset,
                strategy: p.strategy,
                longProspectivity: p.longProspectivity,
                shortProspectivity: p.shortProspectivity,
                volatility1: p.volatility1,
                volatility2: p.volatility2,
                avgReturn1: p.avgReturn1,
                avgReturn2: p.avgReturn2,
                index: p.index
            }))
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await saveResults(topPairs, analysis);
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        displayResults(topPairs, analysis);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        logger.info('\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ù–î–ï–ö–°–ê–ú:');
        logger.info('=' .repeat(60));
        
        if (sp500AllPairs.length > 0) {
            const sp500Correlations = sp500AllPairs.map(p => p.correlation);
            logger.info(`\nüìà S&P500:`);
            logger.info(`  –í—Å–µ–≥–æ –ø–∞—Ä: ${sp500AllPairs.length}`);
            logger.info(`  –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(sp500Correlations.reduce((sum, val) => sum + val, 0) / sp500Correlations.length * 100).toFixed(2)}%`);
            logger.info(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(Math.max(...sp500Correlations) * 100).toFixed(2)}%`);
            logger.info(`  –¢–æ–ø-–ø–∞—Ä—ã: ${topSp500Pairs.map(p => `${p.asset1}-${p.asset2}`).join(', ')}`);
        }
        
        if (nasdaqAllPairs.length > 0) {
            const nasdaqCorrelations = nasdaqAllPairs.map(p => p.correlation);
            logger.info(`\nüìà NASDAQ:`);
            logger.info(`  –í—Å–µ–≥–æ –ø–∞—Ä: ${nasdaqAllPairs.length}`);
            logger.info(`  –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(nasdaqCorrelations.reduce((sum, val) => sum + val, 0) / nasdaqCorrelations.length * 100).toFixed(2)}%`);
            logger.info(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(Math.max(...nasdaqCorrelations) * 100).toFixed(2)}%`);
            logger.info(`  –¢–æ–ø-–ø–∞—Ä—ã: ${topNasdaqPairs.map(p => `${p.asset1}-${p.asset2}`).join(', ')}`);
        }

        if (imoexAllPairs.length > 0) {
            const imoexCorrelations = imoexAllPairs.map(p => p.correlation);
            logger.info(`\nüìà IMOEX:`);
            logger.info(`  –í—Å–µ–≥–æ –ø–∞—Ä: ${imoexAllPairs.length}`);
            logger.info(`  –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(imoexCorrelations.reduce((sum, val) => sum + val, 0) / imoexCorrelations.length * 100).toFixed(2)}%`);
            logger.info(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(Math.max(...imoexCorrelations) * 100).toFixed(2)}%`);
            logger.info(`  –¢–æ–ø-–ø–∞—Ä—ã: ${topImoexPairs.map(p => `${p.asset1}-${p.asset2}`).join(', ')}`);
        }

        if (rucbitrAllPairs.length > 0) {
            const rucbitrCorrelations = rucbitrAllPairs.map(p => p.correlation);
            logger.info(`\nüìà RUCBITR:`);
            logger.info(`  –í—Å–µ–≥–æ –ø–∞—Ä: ${rucbitrAllPairs.length}`);
            logger.info(`  –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(rucbitrCorrelations.reduce((sum, val) => sum + val, 0) / rucbitrCorrelations.length * 100).toFixed(2)}%`);
            logger.info(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(Math.max(...rucbitrCorrelations) * 100).toFixed(2)}%`);
            logger.info(`  –¢–æ–ø-–ø–∞—Ä—ã: ${topRucbitrPairs.map(p => `${p.asset1}-${p.asset2}`).join(', ')}`);
        }

        if (rgbiAllPairs.length > 0) {
            const rgbiCorrelations = rgbiAllPairs.map(p => p.correlation);
            logger.info(`\nüìà RGBI:`);
            logger.info(`  –í—Å–µ–≥–æ –ø–∞—Ä: ${rgbiAllPairs.length}`);
            logger.info(`  –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(rgbiCorrelations.reduce((sum, val) => sum + val, 0) / rgbiCorrelations.length * 100).toFixed(2)}%`);
            logger.info(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(Math.max(...rgbiCorrelations) * 100).toFixed(2)}%`);
            logger.info(`  –¢–æ–ø-–ø–∞—Ä—ã: ${topRgbiPairs.map(p => `${p.asset1}-${p.asset2}`).join(', ')}`);
        }
        
        logger.info('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ä:', error);
        process.exit(1);
    }
}

function getCorrelation(): number {
    return process.env.MIN_CORRELATION ? parseFloat(process.env.MIN_CORRELATION) : indexesConfigManager.getConfig().defaultCorrelationThreshold;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
} 
