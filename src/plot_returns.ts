import * as fs from 'fs-extra';
import path from 'path';
import * as plotly from 'nodeplotlib';
import { StockData, CSVRow, csvRowToStockData } from './types';
import { stockSymbols } from './stock';
import logger from './logger';

const STATS_DIR = 'stats';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
async function readCSV(symbol: string): Promise<StockData[]> {
    const csvPath = path.join(STATS_DIR, `${symbol}.csv`);
    const csvContent = await fs.readFile(csvPath, 'utf-8');
    const lines = csvContent.split('\n');
    const headers = lines[0].split(',');
    const data: StockData[] = [];
    
    for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim()) {
            const values = lines[i].split(',');
            const row: CSVRow = {};
            headers.forEach((header: string, index: number) => {
                row[header.trim()] = values[index] ? parseFloat(values[index]) : 0;
            });
            data.push(csvRowToStockData(row));
        }
    }
    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
function calculateReturns(prices: number[]): number[] {
    const returns: number[] = [];
    for (let i = 1; i < prices.length; i++) {
        const ret = (prices[i] - prices[i - 1]) / prices[i - 1];
        returns.push(ret * 100); // –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    }
    return returns;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
async function plotHistogram(symbol: string, returns: number[]): Promise<void> {
    const trace = {
        x: returns,
        type: 'histogram' as const,
        marker: { color: '#1f77b4' },
        nbinsx: 50,
        name: symbol
    };
    
    const layout = {
        title: `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π (%) –¥–ª—è ${symbol}`,
        xaxis: { title: '–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)' },
        yaxis: { title: '–ß–∞—Å—Ç–æ—Ç–∞' },
        bargap: 0.05
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plotly.plot([trace], layout);
    
    logger.info(`‚úÖ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${symbol}`);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
    logger.info('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤
    const symbols = stockSymbols;
    
    logger.info(`üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${symbols.length} –∞–∫—Ç–∏–≤–æ–≤...`);
    
    try {
        logger.info('üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π...\n');
        
        for (const symbol of symbols) {
            try {
                logger.info(`üìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${symbol}...`);
                const data = await readCSV(symbol);
                
                if (data.length < 2) {
                    logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
                    continue;
                }
                
                const prices = data.map(row => row.Close).filter(price => price > 0);
                const returns = calculateReturns(prices);
                
                if (returns.length === 0) {
                    logger.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –¥–ª—è ${symbol}`);
                    continue;
                }
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const mean = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;
                const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - mean, 2), 0) / returns.length;
                const stdDev = Math.sqrt(variance);
                
                logger.info(`‚úÖ ${symbol}: ${returns.length} –¥–Ω–µ–π, —Å—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${mean.toFixed(2)}%, —Å—Ç.–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${stdDev.toFixed(2)}%`);
                
                await plotHistogram(symbol, returns);
                
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${symbol}: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        }
        
        logger.info('\nüéâ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã!');
        logger.info('üìÅ HTML —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ stats/');
        
    } catch (error) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : 'Unknown error');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 