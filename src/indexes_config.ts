import fs from 'fs-extra';
import path from 'path';
import logger from './logger';

export interface IndexConfig {
  name: string;
  displayName: string;
  description: string;
  enabled: boolean;
  correlationThreshold: number;
  color: string;
  emoji: string;
}

export interface IndexesConfig {
  indexes: {
    [key: string]: IndexConfig;
  };
  defaultCorrelationThreshold: number;
  defaultTopPairsCount: number;
}

class IndexesConfigManager {
  private configPath: string;
  private config: IndexesConfig;

  constructor() {
    this.configPath = path.join(__dirname, 'indexes_config.json');
    this.config = this.loadConfig();
  }

  private loadConfig(): IndexesConfig {
    try {
      if (fs.existsSync(this.configPath)) {
        const configData = fs.readJsonSync(this.configPath);
        logger.info('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return configData;
      } else {
        logger.warn('‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        return this.getDefaultConfig();
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
      return this.getDefaultConfig();
    }
  }

  private getDefaultConfig(): IndexesConfig {
    return {
      indexes: {
        sp500: {
          name: "S&P500",
          displayName: "üá∫üá∏ S&P500",
          description: "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∞–∫—Ü–∏–∏",
          enabled: true,
          correlationThreshold: 0.7,
          color: "#3498db",
          emoji: "üá∫üá∏"
        },
        nasdaq: {
          name: "NASDAQ",
          displayName: "üìà NASDAQ",
          description: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–∫—Ü–∏–∏",
          enabled: true,
          correlationThreshold: 0.7,
          color: "#2ecc71",
          emoji: "üìà"
        },
        imoex: {
          name: "IMOEX",
          displayName: "üá∑üá∫ IMOEX",
          description: "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏",
          enabled: true,
          correlationThreshold: 0.6,
          color: "#e74c3c",
          emoji: "üá∑üá∫"
        },
        rucbitr: {
          name: "RUCBITR",
          displayName: "üè¢ RUCBITR",
          description: "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏",
          enabled: false,
          correlationThreshold: 0.6,
          color: "#9b59b6",
          emoji: "üè¢"
        },
        rgbi: {
          name: "RGBI",
          displayName: "üìà RGBI",
          description: "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏",
          enabled: false,
          correlationThreshold: 0.6,
          color: "#f39c12",
          emoji: "üìà"
        }
      },
      defaultCorrelationThreshold: 0.7,
      defaultTopPairsCount: 3
    };
  }

  public getConfig(): IndexesConfig {
    return this.config;
  }

  public getEnabledIndexes(): string[] {
    return Object.entries(this.config.indexes)
      .filter(([_, config]) => config.enabled)
      .map(([key, _]) => key);
  }

  public getIndexConfig(indexKey: string): IndexConfig | null {
    return this.config.indexes[indexKey] || null;
  }

  public isIndexEnabled(indexKey: string): boolean {
    const indexConfig = this.getIndexConfig(indexKey);
    return indexConfig ? indexConfig.enabled : false;
  }

  public getIndexDisplayName(indexKey: string): string {
    const indexConfig = this.getIndexConfig(indexKey);
    return indexConfig ? indexConfig.displayName : indexKey;
  }

  public getIndexCorrelationThreshold(indexKey: string): number {
    const indexConfig = this.getIndexConfig(indexKey);
    return indexConfig ? indexConfig.correlationThreshold : this.config.defaultCorrelationThreshold;
  }

  public getIndexColor(indexKey: string): string {
    const indexConfig = this.getIndexConfig(indexKey);
    return indexConfig ? indexConfig.color : '#6c757d';
  }

  public getIndexEmoji(indexKey: string): string {
    const indexConfig = this.getIndexConfig(indexKey);
    return indexConfig ? indexConfig.emoji : 'üìä';
  }

  public getEnabledIndexesInfo(): Array<{key: string, config: IndexConfig}> {
    return Object.entries(this.config.indexes)
      .filter(([_, config]) => config.enabled)
      .map(([key, config]) => ({ key, config }));
  }

  public logEnabledIndexes(): void {
    const enabledIndexes = this.getEnabledIndexesInfo();
    logger.info(`üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (${enabledIndexes.length}):`);
    enabledIndexes.forEach(({ config }) => {
      logger.info(`  ${config.displayName} - ${config.description} (–ø–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: ${config.correlationThreshold * 100}%)`);
    });
  }

  public updateIndexStatus(indexKey: string, enabled: boolean): void {
    if (this.config.indexes[indexKey]) {
      this.config.indexes[indexKey].enabled = enabled;
      this.saveConfig();
      logger.info(`‚úÖ –ò–Ω–¥–µ–∫—Å ${indexKey} ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    } else {
      logger.error(`‚ùå –ò–Ω–¥–µ–∫—Å ${indexKey} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
    }
  }

  private saveConfig(): void {
    try {
      fs.writeJsonSync(this.configPath, this.config, { spaces: 2 });
      logger.info('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const indexesConfigManager = new IndexesConfigManager();

export default indexesConfigManager; 