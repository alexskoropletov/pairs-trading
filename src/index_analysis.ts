import * as fs from 'fs-extra';
import path from 'path';
import { CorrelationPair, AssetInfo } from './types';
import { stockSymbols, sp500StocksFallback, nasdaq100StocksFallback, imoexStocksFallback, rucbitrStocksFallback, rgbiStocksFallback } from './stock';
import { ensureTickerDirectories } from './utils';
import logger from './logger';

const STATS_DIR = 'stats';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
interface IndexAnalysis {
    indexName: string;
    totalPairs: number;
    averageCorrelation: number;
    maxCorrelation: number;
    minCorrelation: number;
    correlationThreshold: number;
    topPairs: CorrelationPair[];
    assetsInfo: AssetInfo[];
    analysisDate: string;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
const INDEX_CORRELATION_THRESHOLDS = {
    'S&P500': 0.7,    // 70% –¥–ª—è –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –∞–∫—Ü–∏–π
    'NASDAQ': 0.75,    // 75% –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ü–∏–π
    'IMOEX': 0.8,      // 80% –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (–≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è)
    'RUCBITR': 0.6,    // 60% –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
    'RGBI': 0.65       // 65% –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤
const INDEX_EMOJIS = {
    'S&P500': 'üìä',
    'NASDAQ': 'üìà',
    'IMOEX': 'üá∑üá∫',
    'RUCBITR': 'üè¢',
    'RGBI': 'üìà'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
// const INDEX_COLORS = {
//     'S&P500': '#3498db',
//     'NASDAQ': '#2ecc71',
//     'IMOEX': '#e74c3c',
//     'RUCBITR': '#9b59b6',
//     'RGBI': '#f39c12'
// };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
function getCorrelationForIndex(indexName: string): number {
    return INDEX_CORRELATION_THRESHOLDS[indexName as keyof typeof INDEX_CORRELATION_THRESHOLDS] || 0.7;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
async function analyzeIndex(indexName: string, symbols: string[], horizonDays: number = 63): Promise<IndexAnalysis> {
    logger.info(`${INDEX_EMOJIS[indexName as keyof typeof INDEX_EMOJIS]} –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${indexName}...`);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ pairs_trading.ts
    const { analyzePairsInIndex, collectAssetsInfo } = await import('./pairs_trading');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    const pairs = await analyzePairsInIndex(symbols, indexName, horizonDays);
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∞—Ö
    const assetsInfo = await collectAssetsInfo(symbols, indexName);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const correlations = pairs.map((p: CorrelationPair) => p.correlation);
    const averageCorrelation = correlations.length > 0 ? correlations.reduce((sum: number, val: number) => sum + val, 0) / correlations.length : 0;
    const maxCorrelation = correlations.length > 0 ? Math.max(...correlations) : 0;
    const minCorrelation = correlations.length > 0 ? Math.min(...correlations) : 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    const correlationThreshold = getCorrelationForIndex(indexName);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ø-–ø–∞—Ä—ã –ø–æ –ø–æ—Ä–æ–≥—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    const topPairs = pairs
        .filter((p: CorrelationPair) => p.correlation >= correlationThreshold)
        .sort((a: CorrelationPair, b: CorrelationPair) => b.correlation - a.correlation)
        .slice(0, 10); // –¢–æ–ø-10 –ø–∞—Ä
    
    const analysis: IndexAnalysis = {
        indexName,
        totalPairs: pairs.length,
        averageCorrelation,
        maxCorrelation,
        minCorrelation,
        correlationThreshold,
        topPairs,
        assetsInfo,
        analysisDate: new Date().toISOString()
    };
    
    logger.info(`${INDEX_EMOJIS[indexName as keyof typeof INDEX_EMOJIS]} ${indexName}: ${pairs.length} –ø–∞—Ä, —Å—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ${(averageCorrelation * 100).toFixed(2)}%, —Ç–æ–ø-–ø–∞—Ä: ${topPairs.length}`);
    
    return analysis;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
async function saveIndexReport(analysis: IndexAnalysis): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    const indexNameLower = analysis.indexName.toLowerCase().replace(/[^a-z0-9]/g, '');
    const reportDir = path.join(STATS_DIR, indexNameLower);
    await fs.ensureDir(reportDir);
    
    const fileName = `pairs_analysis.json`;
    const filePath = path.join(reportDir, fileName);
    
    await fs.writeJson(filePath, analysis, { spaces: 2 });
    logger.info(`üíæ –û—Ç—á–µ—Ç ${analysis.indexName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É
function displayIndexResults(analysis: IndexAnalysis): void {
    const emoji = INDEX_EMOJIS[analysis.indexName as keyof typeof INDEX_EMOJIS];
    
    logger.info(`\n${emoji} –û–¢–ß–ï–¢ –ü–û ${analysis.indexName}:`);
    logger.info('=' .repeat(50));
    logger.info(`–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: ${analysis.totalPairs}`);
    logger.info(`–ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: ${(analysis.correlationThreshold * 100).toFixed(0)}%`);
    logger.info(`–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.averageCorrelation * 100).toFixed(2)}%`);
    logger.info(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.maxCorrelation * 100).toFixed(2)}%`);
    logger.info(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(analysis.minCorrelation * 100).toFixed(2)}%`);
    logger.info(`–¢–æ–ø-–ø–∞—Ä –Ω–∞–π–¥–µ–Ω–æ: ${analysis.topPairs.length}`);
    
    if (analysis.topPairs.length > 0) {
        logger.info(`\n${emoji} –¢–û–ü-–ü–ê–†–´ ${analysis.indexName}:`);
        analysis.topPairs.forEach((pair, index) => {
            logger.info(`${index + 1}. ${pair.asset1} ‚Üî ${pair.asset2}`);
            logger.info(`   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${(pair.correlation * 100).toFixed(2)}%`);
            logger.info(`   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${pair.strategy}`);
            logger.info(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${pair.volatility1.toFixed(2)}% / ${pair.volatility2.toFixed(2)}%`);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
async function createIndexInfographic(analysis: IndexAnalysis): Promise<void> {
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏
        const { InfographicGenerator } = await import('./create_infographic');
        
        // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
        const generator = new InfographicGenerator();
        await generator.generateIndexInfographic(analysis);
        
        logger.info(`üé® –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ ${analysis.indexName} —Å–æ–∑–¥–∞–Ω–∞`);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è ${analysis.indexName}:`, error);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
export async function analyzeAllIndexes(horizonDays: number = 63): Promise<void> {
    logger.info('üéØ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        await fs.ensureDir(STATS_DIR);
        await ensureTickerDirectories();
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        const sp500Symbols = sp500StocksFallback.map(stock => stock.symbol).filter(symbol => stockSymbols.includes(symbol));
        const nasdaqSymbols = nasdaq100StocksFallback.map(stock => stock.symbol).filter(symbol => stockSymbols.includes(symbol));
        const imoexSymbols = imoexStocksFallback.map(stock => stock.symbol).filter(symbol => stockSymbols.includes(symbol));
        const rucbitrSymbols = rucbitrStocksFallback.map(stock => stock.symbol).filter(symbol => stockSymbols.includes(symbol));
        const rgbiSymbols = rgbiStocksFallback.map(stock => stock.symbol).filter(symbol => stockSymbols.includes(symbol));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å
        const analyses: IndexAnalysis[] = [];
        
        if (sp500Symbols.length > 0) {
            const sp500Analysis = await analyzeIndex('S&P500', sp500Symbols, horizonDays);
            analyses.push(sp500Analysis);
            await saveIndexReport(sp500Analysis);
            displayIndexResults(sp500Analysis);
            await createIndexInfographic(sp500Analysis);
        }
        
        if (nasdaqSymbols.length > 0) {
            const nasdaqAnalysis = await analyzeIndex('NASDAQ', nasdaqSymbols, horizonDays);
            analyses.push(nasdaqAnalysis);
            await saveIndexReport(nasdaqAnalysis);
            displayIndexResults(nasdaqAnalysis);
            await createIndexInfographic(nasdaqAnalysis);
        }
        
        if (imoexSymbols.length > 0) {
            const imoexAnalysis = await analyzeIndex('IMOEX', imoexSymbols, horizonDays);
            analyses.push(imoexAnalysis);
            await saveIndexReport(imoexAnalysis);
            displayIndexResults(imoexAnalysis);
            await createIndexInfographic(imoexAnalysis);
        }
        
        if (rucbitrSymbols.length > 0) {
            const rucbitrAnalysis = await analyzeIndex('RUCBITR', rucbitrSymbols, horizonDays);
            analyses.push(rucbitrAnalysis);
            await saveIndexReport(rucbitrAnalysis);
            displayIndexResults(rucbitrAnalysis);
            await createIndexInfographic(rucbitrAnalysis);
        }
        
        if (rgbiSymbols.length > 0) {
            const rgbiAnalysis = await analyzeIndex('RGBI', rgbiSymbols, horizonDays);
            analyses.push(rgbiAnalysis);
            await saveIndexReport(rgbiAnalysis);
            displayIndexResults(rgbiAnalysis);
            await createIndexInfographic(rgbiAnalysis);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        await createSummaryReport(analyses);
        
        logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function createSummaryReport(analyses: IndexAnalysis[]): Promise<void> {
    const summary = {
        totalIndexes: analyses.length,
        totalPairs: analyses.reduce((sum, analysis) => sum + analysis.totalPairs, 0),
        totalTopPairs: analyses.reduce((sum, analysis) => sum + analysis.topPairs.length, 0),
        indexes: analyses.map(analysis => ({
            name: analysis.indexName,
            emoji: INDEX_EMOJIS[analysis.indexName as keyof typeof INDEX_EMOJIS],
            totalPairs: analysis.totalPairs,
            topPairs: analysis.topPairs.length,
            averageCorrelation: analysis.averageCorrelation,
            maxCorrelation: analysis.maxCorrelation,
            correlationThreshold: analysis.correlationThreshold
        })),
        analysisDate: new Date().toISOString()
    };
    
    const summaryPath = path.join(STATS_DIR, 'summary.json');
    await fs.writeJson(summaryPath, summary, { spaces: 2 });
    
    logger.info('\nüìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢:');
    logger.info('=' .repeat(40));
    logger.info(`–í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${summary.totalIndexes}`);
    logger.info(`–í—Å–µ–≥–æ –ø–∞—Ä: ${summary.totalPairs}`);
    logger.info(`–í—Å–µ–≥–æ —Ç–æ–ø-–ø–∞—Ä: ${summary.totalTopPairs}`);
    
    summary.indexes.forEach(index => {
        logger.info(`${index.emoji} ${index.name}: ${index.totalPairs} –ø–∞—Ä, ${index.topPairs} —Ç–æ–ø-–ø–∞—Ä, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ${(index.averageCorrelation * 100).toFixed(2)}%`);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { analyzeIndex, saveIndexReport, displayIndexResults, createIndexInfographic }; 